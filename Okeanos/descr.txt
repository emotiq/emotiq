Okeanos Data Base Reference

DM/RAL 03/09
---------------------------

Okeanos uses BTrees to organize data as key-value pairs. A data base
file begins with a header describing the location of the Main BTree
and other information pertaining to memory management in the file.

The Main BTree associates character string keys with arbitrary
data. There are several basic kinds of data whose structure is known
by the Okeanos data base file. User defined data are recognized as
such by Okeanos, but it is up to the client program to interpret its
contents. User defined contents can be arbitrary object data, heaps of
data, or additional BTrees of data.

The Main BTree is organized into Interior Nodes and Leaf Nodes. Leaf
Nodes contain a collection of pointers to key / data locations in the
file. Interior Nodes contain an alternating sequence of Node Pointers
and Key/Data pointers. The first cell of an interior node points to a
subnode (interior or leaf) that contains all keys less than the
following key. The final cell of an interior node points to a subnode
that contains keys greater than the preceeding key/data pointer.
						  
	 					  
      Interior Node
     +----+----+----+----+--//--+----+----+----+  
     | NP | DP | NP | DP | .... | NP | DP | NP |  
     +----+----+----+----+--//--+----+----+----+     
	|      	       	       	       	|    |	     
	|	   	      	  	|    |	     
       	V      	       	       	       	|    V  e.g., Leaf Node      	
      +--------------------------+	|   +----+----+----+--//--+----+
      | Node (Interior or Leaf)	 |	|   | DP | DP | DP |   	  | DP |
      +--------------------------+	|   +----+----+----+--//--+----+
       	       	       	       	       	|      	       	       	       	
			       		V  Data Area
       	       	       	     +----------+---------------+----------+
		       	     | Header   | KeyString Ptr | Data ... |
			     +----------+---------------+----------+
			                   |             	       	     
			                   |             	       	     
			                   V  String Pool        	     
			             --//--+------------+--//--	       	     
			                   | String ... |      	       	     
			             --//--+------------+--//--		     
			      		     			    
			      		     
Key/Value pointers in the Main BTree nodes point to a region in the
file containing a pointer to the key string followed by the data. All
key strings for the Main BTree are stored in the Main String
Pool. Main-Btree keystrings are case sensitive.
					
Data types recognized by Okeanos include:
					
     * free areas -- interior zones of the file that were previously
     occupied, but now free.		
					
     * BTrees and nodes			
					
     * Data heap blocks (contiguous zones of storage for headerless data)
     for both fixed-length and variable-length data items.
					
     * String pools			
					
     * Long strings			
					
     * Tables and schema		
					
     * File UUID - a unique serial number for the entire data base file,
     with access keystring "*FILE-UUID*"
					
     * User defined data		
					
All of these data regions are prefixed with a header containing the
stored size in bytes of the data region beyond the header (including
the keystring pointer for Main BTree items), and UUID that identifies
the type of the region.			
					
Free blocks additionally contain a link pointer to other free blocks
in the free list. File storage allocation is done on a first-fit basis
among these free regions. And if there are no free regions large
enough to satisfy the requested size, plus the size of a standard
header, then the file is extended as needed.
					
						| Data pointer
    Header	       	       	       		V
    +-------------------+-----------+-----------+----------------+
    | Data Size (bytes) | Free Link | Type UUID | Data region... |
    +-------------------+-----------+-----------+----------------+

Ordinarily, the user need never be concerned with the header prefixed
to data. The BTree Key/Data pointers always point to the start of the
data region just after the header. In the case of Main-BTree data,
this points to the keystring pointer followed by the data. For other
internally used data types, e.g., BTree nodes, file tables, heaps,
there is no keystring pointer, but these data items usually have their
own type-specific header describing their contents.

In addition to simple string-key / value associations, Okeanos
recognizes file Tables consisting of a Table structure, an associated
Schema, and one or more associated BTrees for access to data
rows. Each data row consists of a number of data columns, in which
data are stored in a C-compatible manner.

Tables, Schema, and associated data are entirely under the control of
the user. Arbitrary items can be used for keys, not just strings, as
long as they can be compared in a partial ordering.

Tabular data can be stored in heaps, or as Okeanos recognized user
data. Heap storage layout is up to the user. Standard data areas will
have a standadr header prefixed by the allocation manager.

Non-tabular data can also be stored using a serialization scheme that
ensures accurate data storage and subsequent deserialization back to
the same kind of object in Lisp memory. Any serializable data can be
stored in this manner.

NOTE: Compiled functions and closures are *not* serializable. You can
refer to functions by symbolic name. But take care with non-keyword
symbols because their package name is stored as part of their
encoding. If a symbol's package is not present on deserialization from
the data base, then it will be created in a zombie package with a
composite name given by the fully qualified symbol, e.g.,
"PACKAGE.SYMBOL".  In general, only keyword symbols, and symbols from
standard packages, are portable.

Pointers in Okeanos are 64-bit offsets from the start of the
file. BTree nodes are fully contained inside of a standard page-sized
block, at page aligned offsets.

Heaps manage their own storage within large allocation units. Small,
fixed-length, data objects can be stored in fixed-heaps, while variable
length data are stored in var-heaps with a count-preceeding of the
byte length of the data. As heap blocks fill, new ones are
allocated. The type of heap and its allocation unit size is
established when a heap is created.

String pools are like var-heaps, but contain only count-prefixed
strings. If a string is longer than 255 bytes then it will be
automatically stored in a fresh standard data region as a
self-restoring, serialized, object.


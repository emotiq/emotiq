;; range-proofs.lisp - blinded value range proofs
;;
;; DM/Emotiq  02/18
;; ------------------------------------------------------------------
#|
The MIT License

Copyright (c) 2018 Emotiq AG

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
|#
;; -------------------------------------------------------------------------
;; Compute a value range prover and verifier for use in validating
;; cryptographically blinded numbers. This version proves each bit of
;; the (integer) value. It produces a rather large structure of prime
;; number field integers, two per bit of every value being attested,
;; plus two more as cryptographic basis vector components for the
;; Pedersen Commitments offered for the value.
;;
;; Algorithm adapted to ECC crypto from the paper:
;;  "Bulletproofs: Short Proofs for Confidential Transactions and More" by
;;     Bunz, Bootle, Boneh, Poelstra, Wuille, and Maxwell.
;;       https://eprint.iacr.org/2017/1066.pdf

;; The code in this module now uses Bulletproofs for vector
;; dot-product proofs. That saves a considerable amount of memory.
;; Using Curve1174 with 252 bits per compressed ECC point, the cost is
;; roughly 1.4KB per proof, compared to a cost of 5.2KB for
;; non-Bulletproofs, atop an overhead in the basis vectors of around
;; 4.8KB.
;;
;; This code currently only provides list aggregation of proofs.
;; Algebraic aggregation will save even more memory, shrinking the
;; cost dramatically with an O(Log2(N)) cost on N-proof aggregates.

(in-package :range-proofs)

;; ------------------------------

(defvar *max-bit-length*  64)

;; ------------------------------------------------------------------

(defun rand-val ()
  ;; random value in Z_r
  (random-between 1 *ed-r*))

;; ------------------------------

(defun zero-vector (&optional (nel *max-bit-length*))
  ;; create a vector of zeros
  (make-array nel
              :initial-element 0))

(defun bits-vector (n &optional (nbits *max-bit-length*))
  ;; convert a value n into a bit vector. Each index into the vector
  ;; is the i'th bit of the value
  (let* ((arr (zero-vector nbits)))
    (loop for ix from 0 below nbits do
          (when (logbitp ix n)
            (setf (aref arr ix) 1)))
    arr))

(defun random-vec (&optional (nel *max-bit-length*))
  ;; construct a vector of unique random values
  (let ((vec (make-array nel)))
    (um:nlet-tail iter ((ix 0))
      (unless (>= ix nel)
        (let ((g  (rand-val)))
          (if (find g vec) ;; prob vanishingly small chance of duplication
              (iter ix)
            (progn
              (setf (aref vec ix) g)
              (iter (1+ ix))))
          )))
    vec))

(defun basis-pts (&optional (nel *max-bit-length*))
  ;; compute a vector of basis-vector curve points
  (let ((vec  (make-array nel)))
    (map-into vec (lambda (x)
                    (declare (ignore x))
                    (ed-projective (ed-random-generator)))
              vec)))

(defun pow-vec (y &optional (nel *max-bit-length*))
  ;; construct a vector of powers of y #(1 y y^2 ... y^(n-1))
  (let ((vec (make-array nel)))
    (do ((v  1  (m* v y))
         (ix 0  (1+ ix)))
        ((>= ix nel) vec)
      (setf (aref vec ix) v))))

(defun ones-vec (&optional (nel *max-bit-length*))
  ;; a vector of 1's
  (make-array nel :initial-element 1))

(defun twos-vec (&optional (nel *max-bit-length*))
  ;; a vector of powers of 2: #(1 2 2^2 2^3 ... 2^(n-1))
  (pow-vec 2 nel))

;; ------------------------------
;; Vector arithmetic over the modular prime field

(defun vec-decr (v k)
  (map 'vector (um:rcurry 'm- k) v))

(defun vec-incr (v k)
  (map 'vector (um:rcurry 'm+ k) v))

(defun vec-add (v1 v2)
  (map 'vector 'm+ v1 v2))

(defun vec-sub (v1 v2)
  (map 'vector 'm- v1 v2))

(defun vec-scale (v k)
  (map 'vector (um:curry 'm* k) v))

(defun vec-hadamard-prod (v1 v2)
  (map 'vector 'm* v1 v2))

(defun vec-dot-prod (v1 v2)
  (reduce 'm+ (vec-hadamard-prod v1 v2)))

;; ------------------------------

(defun poly-dot-prod (poly1 poly2)
  ;;
  ;; Produce a dot-product polynomial from two polynomials with vector
  ;; coeffs. Polynomials are vectors with element at index ix
  ;; representing the ix'th order coefficient. But these coefficients
  ;; are themselves vectors of prime field integers.
  ;;
  (let ((vec   (make-array (+ (length poly1) (length poly2) -1)
                           :initial-element 0)))
    (loop for v1 across poly1
          for ix from 0
          do
          (loop for v2 across poly2
                for jx from ix
                do
                (setf (aref vec jx)
                      (m+ (aref vec jx)
                          (vec-dot-prod v1 v2)))
                ))
    vec))

;; ------------------------------
;; Pedersen Commitments

(defun simple-commit (hpt blind val)
  ;; commit to a value val with blinding blind*Hpt
  (ed-add (ed-mul hpt blind)
          (ed-nth-pt val)))

(defun vec-commit (hpt blind hs hvec gs gvec)
  ;; form a vector commitment with basis vector gs,
  ;; blinding vector hs, and blinding term blind*Hpt
  (let ((pt (ed-mul hpt blind)))
    (loop for h across hs
          for hv across hvec
          for g across gs
          for gv across gvec
          do
          (setf pt (ed-add pt
                           (ed-add (ed-mul h hv)
                                   (ed-mul g gv)))))
    pt))

;; ------------------------------

(defstruct range-proof-block
  ;; curve and basis vectors
  basis   ;; should not change between blocks, so common public info
  proofs  ;; public values
  sum-cmt    ;; sum of commitments for this batch
  sum-gamma) ;; secret value = sum of gamma factors used

(defstruct (range-proof
            (:constructor %make-range-proof))
  ;; commitments
  vcmt acmt scmt t1cmt t2cmt
  ;; parameters
  tau_x mu t_hat
  ;; left, right vectors
  dot-proof
  ;; challenge values (Shamir-Fiat hash values)
  x y z)

(defstruct (dot-prod-proof
            (:constructor %make-dot-prod-proof))
  u pcmt a b xlrs)

;; ------------------------------

(defstruct bp-basis
  curve nbits hpt gs hs)

(define-symbol-macro *bhpt*    (bp-basis-hpt    *bp-basis*))
(define-symbol-macro *bgs*     (bp-basis-gs     *bp-basis*))
(define-symbol-macro *bhs*     (bp-basis-hs     *bp-basis*))
(define-symbol-macro *curve*   (bp-basis-curve  *bp-basis*))
(define-symbol-macro *nbits*   (bp-basis-nbits  *bp-basis*))

(defvar *bp-basis* 
  ;; define fully here for default basis so we have comparable proofs
  ;; across blockchain
  (make-bp-basis
   :CURVE :CURVE1174
   :NBITS 64
   :HPT #S(EDWARDS-ECC:ED-PROJ-PT :X 2182379953369641632517639022101150529277175724247236450426219701597546052439
                                  :Y 2089266500847130883365202273463507731036933536496786317289009790420135050657
                                  :Z 791658237893457670934264958707291846924673871180839117867589981661722103301)

   :GS #(#S(EDWARDS-ECC:ED-PROJ-PT :X 396235780688016554032868129331705408218242387283339730922972872599270438803
                                   :Y 344641427735155390040965214954916312974845847206979544943834932677635250565
                                   :Z 3378681058488412448716074069754687023002234253735195689779259143501661830886)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1987990942633475046473583083401113274275482488053215982980632964457962389145
                                   :Y 2645608141618561243970479824236980649797973787125024113216822181007771930766
                                   :Z 2636433997654346083389783037487591283751234476460052460242690998512128641343)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 3184052809341142676736027697711870969059549062583993903353730779859893108842
                                   :Y 402162013318274398165840708502474055831378545256799019890431732240152193449
                                   :Z 1740553370045420037643279239567851103577910534808070667585438446266181264341)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2405132613581348298874440842646398826420043206644707976605724832072513343712
                                   :Y 976752309182720061699188967211652843000692573784114417295762259845496758233
                                   :Z 1734318165483302648680465422185100521388514244509581940454090840698570563740)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1350450350328333011927250383950004387187992974718205101325382737702872807456
                                   :Y 2880247490223435944243807995384427501877031090684029502644649748248871326185
                                   :Z 2866012049561139769840401028040966834012878403835745410391825464219218992732)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 3117203903816444480012968748998747106562208040181766369660162933104489346895
                                   :Y 2239272710612333345869943428975577277232157250959267452514171762090489366007
                                   :Z 2911245230552905570363889508077750995074241793843052739653594119164147527617)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 571918261816871415865446168982195676061278592356357621494860743793180417914
                                   :Y 50153351822082203593953993985161661296931201199725675956108553084173361299
                                   :Z 1430924089095376386650884699870425677214553595902537948884708688104957911676)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2447747958663607805432148280319200555959829590359810364167573695102349528206
                                   :Y 1104358023665280214831272979013609768985381884631146084561380096401217967807
                                   :Z 3391667355140217654729928465722434353491753020456214589609352217262425195220)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2689175937628148512438678410814096041325994300510720182587422720102308364673
                                   :Y 1587416766107547438209303698528862937667306237515990117871085529363433670950
                                   :Z 28593243103563188765589711868757786231152481123855762230317021184427272593)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 93743271564130813960508050603342301113069645664976155422099819775754668579
                                   :Y 1055385650854527507927441388403048278874224729535968927771087809205220103219
                                   :Z 3030410261668508786268823250898247004659407671172836785159752097608840779559)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2473768975796292636974144424119937567012682978472608371107877030667612651603
                                   :Y 351864768553558313986552024548178131082412765701775231167168584176413220581
                                   :Z 3241385423271858612119807402701526158188789430299218618120724936469163474565)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 320662532658252310342590241518363618255729422881485077406157452418546606558
                                   :Y 3018446588149207762129643382269852356056298433056342071686074303795056082206
                                   :Z 566216449431528975418773574987308534853209878556569536858991048497968090216)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1558500136013029191075083251500518541024054259349891255390955447935017273764
                                   :Y 14450398392399333819137994891987022961016023371626918846900171552679536345
                                   :Z 478075018855269390599844711057428612990805509892253551100358772529503391594)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 3460788713543630260872016511813340485218265057679414362170526015687536211675
                                   :Y 3591862225294999725543154220947342981642069258276508585034786940496992696892
                                   :Z 430783515011705969432672569647721079005060251267996667751608376797284593268)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1483989378209896577757054429496511436198004045854382646122223284391873590364
                                   :Y 2225673257414540217688933132571011799486200647661706250357696142911849170958
                                   :Z 1171222180811566226251542340344962304567744018299225296812455801876644318927)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1818185538100334841841431520285024363290590758113870632668413007881738119248
                                   :Y 1061174191039697158892620198754906125646535397290481559487256347490958038751
                                   :Z 1291853822705881316895755469916342879997668321740508662989274335019702827970)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1158399650773936067829045492600298699742710651525843449139513423808627184525
                                   :Y 96981720767437861685154157449818269597954978919542211222978136849213654759
                                   :Z 2147268466493717957165490894927171361897813695141940367087868725722919550176)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2870505010750642130107712824371533598074214366524150566899341686017466274004
                                   :Y 470356294162327972810059653729107940217518410597338282827422816104600730497
                                   :Z 2964431697587210219952456802145701008453387970954423883142261489203650652317)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2000149873791626279701898088280501819984205081009817273086530320908799104080
                                   :Y 634560177964836446575718672619954702908717478929750811064121201049451041203
                                   :Z 3255568946289029560300574310880067494391303258267189900310338296343153583342)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1998213994221513187005150627118074941378822912406259504105143408904611608431
                                   :Y 2962368925656953940128978228672664612493486737537482328577015443219553011724
                                   :Z 1879517835228268047655574412567490495629271747235959169040257415997604269752)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1223456538608804881383577167708526799035064942224687592839096793695148200247
                                   :Y 125210518681317590108280434415718266737927447241116743016506281432806096157
                                   :Z 866751876454032267969664161911349819675934946359534201619649214356929833774)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 3198301741314381245771764173527903986505843389137643763623071949359398176172
                                   :Y 239104983620904326883741649416892976146554873255283276477609450129529713071
                                   :Z 3612172148688294858498720374956836568381447752091642108333862785202315811108)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 27810793488036081612375992405073528085550009059146136303492697199166742652
                                   :Y 376088500905696603745606622417831536650733948355026048069022977608137915065
                                   :Z 2630999431006445082542061287434519271440142601560470898147581467102335657589)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 389599856966820100305421785220281403008609980990044462428369726844808049278
                                   :Y 2444931388283245474121089767272717459762007514959568111676350562401270533383
                                   :Z 37360661417936004636612467036969788254414193311512718907253611143194848192)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 3192006471771817385611828889033430150680071583494778062505037880335719305853
                                   :Y 3213498637340409859005988125877684126316447892527971728597103762638701973325
                                   :Z 2341374824023746996683237302652017447011326680991489829479370445352800156136)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2903907786396648979427035353888892429104743411207301629121777967948135138183
                                   :Y 260873952444596574917049116032054088273338163094073527450744679187616641955
                                   :Z 2237128791523511912212950140729479316857072653070779714458876390112153367159)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 240074146340746723419349154963799934556435933646480902982633902881525865978
                                   :Y 311121591090439199618006032497030624943927359136833751491960476888262834533
                                   :Z 1371738065238721936337892883865643120503391365154925412215658708952110237840)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 743420734817841445937322687140317870540494366159979675793261054444309391017
                                   :Y 1661508769297299272091457646716619608119960312298721173687242343036706515223
                                   :Z 1193197496955792326794607048393055183291489004888641607849249205449968155264)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2829233591123463560398371133896987968644690029004855152701059538013326650517
                                   :Y 387465057680169017219775665419061258000408969592526424693191965477757583832
                                   :Z 1267132550969815516410319851060514319196557067684267198035837162958727306694)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1877151942976592898654032893310108272853702514489888147421250971241515671330
                                   :Y 92150761905574651400355502134923946635532361487064122667090907917845003239
                                   :Z 1541764206944523855573315746734580322263253995742414323119579422418913948297)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2279896758427641564849837741680819178720588712886159250225445095133448614365
                                   :Y 3239324005464710428859474732325759141162647158470344762740139339641463334118
                                   :Z 2838440904184771377274212431957121784092323942379897637746447360762975383916)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2765453508742394159889559669415539690756548589284262126064857218880197445965
                                   :Y 1081733132489834768081826441170652936811216296829864437512315572560325609483
                                   :Z 2621837852636422167956011371221167640482340406432218220353518371778147271955)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 751603345208066576507305672879060975426364019900476192192046946948787234695
                                   :Y 998614226722967878436227364183384489600988550564451104306026748479684572083
                                   :Z 559133014332731635273330632671587976653641231278007340159346548734891655434)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1819439739234096468112858779650658069475862205475321102759108031342065429654
                                   :Y 2176554714723509493120901117723947100021850960947295692186319249316943404231
                                   :Z 344471066288688169664543157122076650035304582487806232135910773459288185529)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 3461316822759330559400631520101012838144828196008418204365940717420652812506
                                   :Y 1198716545890448463156903056335649072671164675147553724919695823185183209520
                                   :Z 1688340770181834058342386351549487085053134060228416967480636319387197198340)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1634750951112158690971115242504645924961991790706598984987916423679982333578
                                   :Y 1455924918766224694631444826737944428531668665952450599482955641239282398268
                                   :Z 2058730189145791680988837210149224772984586572679460045748268838591640211358)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1719769814027030916972110374561650213360973654027582025657893716815632176569
                                   :Y 29257478084876998818684445949588607682312497996735755148809752169886592596
                                   :Z 3222898464129824502419734656615469084507125005960502061926474660050158868537)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 128342336205330981837713109049172932941262842985282855652705997027019018879
                                   :Y 699439213250928597368743519950958156996993630672475712746809250548425380205
                                   :Z 2944034162645853471429722926699657157249848309214787275703299369812508280238)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2573572856972497281690868056896494772645461067518173795637135949187363529648
                                   :Y 1786142535897553875388050163619979242312655700618686556574476107534881399198
                                   :Z 508831273830998191104371189435939673061726515409689481207146874119077100599)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2993376760157550897479824935890653722868625263322132874518855498218124646815
                                   :Y 1103265288495713424722818946303069039148809599707933077241035564457413524255
                                   :Z 89437130002174053336306590820759083981233307297628216555787569812363572685)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1244241210627819760931831849069131658948593325347494262241623219995174225967
                                   :Y 2460272476379457136778174622282687150936256007302010333994456951911997830349
                                   :Z 2072195544400414888835579813205739563410161964815598216214750599575890331856)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1489837947676769341557615378906571202918846183282081329677846658632914138362
                                   :Y 2685699052257948997984586419316159130531706947569378304734580091960413743823
                                   :Z 2529821358442082132902629717384808852221792120203765610254819211025913266884)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 943284662345790443101836325314022397451838101881149577846417431594584050500
                                   :Y 2681479388455360547921386496445606515330712785847276914008297350351622357850
                                   :Z 1334570666137326254889003345714863526630980246752089174833970992370228629028)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1689280586864806750577415193206161195856900270586176904055518957217027369948
                                   :Y 3151016529447010982324607977807384208341383212644035558492758750781457120012
                                   :Z 1169809238095937838144097335513873209909227204043950222316794096011671847238)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 3182221619752192286251179513481903080978472512728685029632144715007561822606
                                   :Y 1714972871948745448898040954128603872461096924592994105563996617873797103337
                                   :Z 2063777812144681445035700474907384568260709384156394752685156504302223998541)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1421958067844607466824312181458889769416720231249924706651762765510351275159
                                   :Y 3211116051491783223285478021688634262125930003707442137696251182272677894310
                                   :Z 1287660185919779631868111544252081826766793093470954636554132311406818834380)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 930667501103230412534203701834916279942746940026113755283807815161027901362
                                   :Y 1958102297542494451198898274024192667779031872119719668179623723066916431823
                                   :Z 3215198720219008879994458091783783316127998879369696454530561087917386622468)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 3031168054695339563457708929490586899048576605199948438300862512891632007825
                                   :Y 1430044144966818012779929799443882713311671545619505213867798753832332647665
                                   :Z 782956894079926844871440753169410813675150579463991036422016228696732814104)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1343920496595741266445785836668848247205374090523983666493100583021737629821
                                   :Y 912939086482866147073866319005752728288395068449846124821976252859421651687
                                   :Z 434228807229475790868476654163050434959592945698276227683451512937609356161)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1574548066886645668503503833144753667264297055614565176122234235466516400954
                                   :Y 609442045481626260440432376932739655775331021798874627463553554014302284983
                                   :Z 1454386916930800214231298022462307855906371539162472168088509249693764109861)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1613387454078839529960676027431585018553744765103554229106435154187403964595
                                   :Y 3334559982472820399857943084578494902177365231040230589692616545255564777387
                                   :Z 1171944499864132633211712162273143349573435778311589687951610228792087309854)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1460531108717932142558100045314496661395105360514276291086274672373957223424
                                   :Y 158760087436647563695603618614176277255506358830839873060007472629678262379
                                   :Z 2706983153846173814380228646889274046042559561514504483183487499763489539737)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 3242712688255454578887293877481855007596981227179143915084674071571096651320
                                   :Y 1315159256173700328081469504976078889194896360966914040818705942125047825535
                                   :Z 832363352128770653707147913760875552307718577158748050374426530764656671248)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2917477193902299086623528155770312453999710063584270870726126864525746888889
                                   :Y 2724035803122745000288225652419747014015363113395660546061717201120233055266
                                   :Z 1999051084236023409312143001670965611665752071009078012787031929007177289040)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1174424638021074336807395088401894642941147569918084440781253490750551362869
                                   :Y 324450641700500660614263222865183888320535793845798022943098433035379402528
                                   :Z 2575503796230106775168562405341255679374979935688662929086013313377149184492)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1256926182770719132995948777731654891477936247392661452209123242711953881178
                                   :Y 28671142330726467328746896362521769140028309541040997350779200767043998775
                                   :Z 1699794724004394295973156272507224178170577926005523474978670322247798577068)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 334739419224154622354994854550895350911118885945892472909039649237642732259
                                   :Y 2799548527918226302023102526773174914480056630606189305167850677743590686206
                                   :Z 2275455187170714245053796065562190072795693344904097755734479453343399077846)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2130287450131482915543809691803842066705315571492700636529483860657947096079
                                   :Y 1742906359417660866181291101067087578736720116544087094309025154236849215620
                                   :Z 1902885505518618680735642562275846373001767089799620532766128045702127747227)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1443965196372748581517790167530423746877779581403608011356048577108348321589
                                   :Y 3047317860969022118065386485637928706416584514876686833891474377782868604505
                                   :Z 1860438955900514984104608135644615226895544373638990623179850494674750157065)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 373979153329646924317142013486899652465270282588075030576114636605790833893
                                   :Y 1830629965044421529907008807273190161776534309145923083618570758985400208214
                                   :Z 1355993244444184153402666953373011600329046083111135656693231878348064083713)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2915422001048783081572415915269095465603671344823818872936202737767572010219
                                   :Y 2479908094436784461634192763685328695844981062108863715689016854698703562475
                                   :Z 3287534797833003369720275393084018168226987668824115680562585764139383165699)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1096192300089690832070352104950419315457504777745197943677187024921129493395
                                   :Y 923145676063282653127509902506986152863186496464779892442857122534928206546
                                   :Z 1209209510394524861944850138810742245038143672747007615994358128580656283456)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1427494534545857357361624064706273125852670317331339149275398147318094343643
                                   :Y 2681319589912674780852840936919035559210984717260101816805839990142883748271
                                   :Z 1613235914708748116376440180051206763874486742926942343002315791314734780788)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 3501161433265693139528258204707597663485391722759036646188296553447556685305
                                   :Y 3480707900482063272791930041001398939302660850273061799036525541078201420252
                                   :Z 3291822607577088085504024703417415446089108542584854481915760746732854212611))

   :HS #(#S(EDWARDS-ECC:ED-PROJ-PT :X 1974302046810190521052727773435463576919300773191647121752677684992350196512
                                   :Y 1942455712097677758257534197429904848485165856313546869770099834761607718016
                                   :Z 3046405936106340734742919331564226167786152135532032586229998374593526070440)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2215553676214153811816486733147388661389155804083273006613126378355906867003
                                   :Y 2694994560089428235100425383882962171025596840216454079849753233999168627579
                                   :Z 27366324174122667840442089951131273780505554492241378537768327421663575914)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 612101879524289113945157367524568533068958836675493308072890983001449864850
                                   :Y 3253400907279814569796414507188141465045497811534957861597115874624676637189
                                   :Z 41610828096881501275106816963254611767973147743900913413652420916707462182)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 137721677997826983702636372321487931543771424534746899295120301718414368300
                                   :Y 2783822286109081380885872650513261038408601479040629104046822154978110525577
                                   :Z 1005837562331062190668997984223095653927433438194988955503646572041849518260)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1184984683707921606091886379029603683127225669805100161821061880713794999511
                                   :Y 1501258885281297391446358300201011962462391223088507100825238365283461086425
                                   :Z 985995358802779279646300417527213829110592703516688859198169751698034782644)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1681410562031058712414804198749250077240348617994630210231574995731806736853
                                   :Y 3006596630624209640131040172061611359211618552696857090997039135362685028420
                                   :Z 600854513184217771226653631201153249536741487961545760592350631274223308874)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 3007954511963983918088838994446367292473912915004013105907421620227795959953
                                   :Y 714158347162677135631237314882877710752534946783931777284192078489082279296
                                   :Z 2193075756590886068071646007839129011750020779105965620154234913058467869093)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1039874978577001151404069244787164257411071786485546541375552665647185586824
                                   :Y 219865615025902708203270389098207986442584836583711413526719476599730390852
                                   :Z 1032668661774047339870338584822145981152047751315204173763077890616097196114)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1263718963263418035761212409698892349232865569333737380228691247715608080418
                                   :Y 136979552211793343509899598598375133077698174741944969574889098430873066842
                                   :Z 2885050135238087439994926886011683920942060406059191451443674575701884754930)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 3115469552635008006835775877639155988220591394459099636179791709381017165511
                                   :Y 709031947303006705330263726368992700213471786746005927763580142671981359123
                                   :Z 723161909683866581328930445768890584432821714388651481590539628040282906675)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 66832956222794962918715231285907339899021589266528640827737901723509486553
                                   :Y 3279579888131717989262230656268708637115421693314766194206790458951907827120
                                   :Z 2390956681050305881651844311832393700217090509787421506879081051354944962409)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2044359856531534650258134246968321082434076080270979255742340643832150847708
                                   :Y 950242921324142922209723749498530783957541429811326135848214762189364903349
                                   :Z 1392331793538554577429881346218903564717929579701197126369341013873372169707)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1836544286561363247360219163655048346116019153532519866918763028781607876691
                                   :Y 681160658629948090810423892643144658137138109851088504970437868584050838492
                                   :Z 3383701344692706753827797099396383061098125765290834135858640876558446696223)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1570649595717887117266432784078658281383611507538159489009006726004210637646
                                   :Y 2380484973579488956941440105384209374726019093414441271291969920863082203977
                                   :Z 313213540751656571078070480604048473303670546807799191651804940666330694550)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 320705117761084621975785951509057164720538282981066560530833805041192321565
                                   :Y 2088207943534034769945070053671794826288826027247662740750802324952037732967
                                   :Z 816892691437211397954961045263239583248959539675332936774401691455954882270)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1349988362965692978660857629085658757984565641751105200858802077101453600984
                                   :Y 3223533798909101930852282888976781044246671023876183986361834821765884176861
                                   :Z 702844806921956232954580724255137521549849389817892633478471059786324897771)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 435066602241351937076604613701968445322599205227805205998121017254442700546
                                   :Y 2178469247024698757556141283123844688355186511087240028296668359404182628850
                                   :Z 631100432615092183374135417281797719863893010580295385132452759646497248913)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2210030774760920246881688707447435194954194103871061424572310270601086850181
                                   :Y 2412317737710987649128606798147899860692595185771995801738325045091987872283
                                   :Z 1608848826705386485436928760877745244340572954565160421275555615335012865669)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 3254754092820096610173055961348221781093167403757856515375854912563067853041
                                   :Y 3193333894207037840937193597793544507582929747980189794506327677423162869104
                                   :Z 3163898909869319831520067908304255178361624954868095869547769533217280394791)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2752295802874196241729991966878245056167565213651604272854125446203776484741
                                   :Y 887677259298103146785203214627625862140451759066309834461254748790541243148
                                   :Z 511918641569052849353163053692451165729313285798297939478869162785280104942)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 514088478543646504388001114694734489615740034505646637484329593634528390065
                                   :Y 2869796339029458026279387804410924824625401941869807480351181953246323903464
                                   :Z 3430034709325395567629858725997927596773795259781683718493011237837749027410)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1043264460054603717320154435473370628144000346784568411576557041099663038252
                                   :Y 2794457763094752430580096322603123512434316556209844453861213005720947108256
                                   :Z 2714121696761005459900851518409001912263757220510593853183085582879191319763)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 619533841816294401709120107614996195622305646775441892480491278556219383429
                                   :Y 71202872548498287672935385657055916980251443800880275071330477880029435339
                                   :Z 2965162838440592778071691665243586107265209246041818523967700657334561720192)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1977696675968902117797934859134162939325949381213019957472233863366794156862
                                   :Y 590062230877396450972795484031062108175870455445432597107299578477859681756
                                   :Z 3233379050938545198955817539380054958152248865043549999837798483434482368606)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 422929268688130141636254103707457664008638842283792497830447442914959691844
                                   :Y 190049793482526978920602332833850818426486511777181357048606003091665102382
                                   :Z 2370703655934818447289535178919905841113475863174516184383236515014194244793)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 3054106349630925768054726910479330105776302451296153891411204324365536800625
                                   :Y 731235785713961260477284168013756245923115904329298330938658155155211113946
                                   :Z 2162274685164879056949757081808736668436622447764482346516659483414523421086)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 636066300973146437396649389464753693993946016683988727040811238588544796506
                                   :Y 818346213107063899935417233168858724073756015920969740333603525555203640795
                                   :Z 3536832540562958718464711877486277567797768269169528566030836617561545027267)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 939374111646299076107681072045124334920982744037003240458818598477409943346
                                   :Y 667558765792712262753498640679009401648884192563677180690795240350847761269
                                   :Z 2827549343561115670623504439898076721627346969686144883065278320901221555069)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2504653176081320751169302152939931216925495893825261665938867218484119537289
                                   :Y 426921817464265160253215338181067935467551929533325450137049883207223488142
                                   :Z 3110477614630066419915041538305855476560099477211681379522111582494316323625)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2452720709492734622858699109084443882849026531455562258329439154931609746466
                                   :Y 3011117609540786722218290932672811205706113869395831307487870958826161272576
                                   :Z 2269137342801615220819134061326505340297279736630075490789968280969317572923)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 107433609202220442045709694458891217926940603365858262850912206421491806702
                                   :Y 3381580239157759322746025847609857741725057020188194150725438798062260509028
                                   :Z 2750480835521880984323994621061874703494870704076399776178158692432825469274)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2198205000331654369962086540924167219858842516019211195242438101922628607314
                                   :Y 188367380452828671726885855589731514753672937696258083620436261260279762170
                                   :Z 3345621429608934286889487789965309181206225735364853641747582913653467304785)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2807171078754365179504468494174722033802246467948959533406843687219611704276
                                   :Y 2126232825837629669429345083928400597737281575740027044287225972827429558679
                                   :Z 861891329901154155387073308213511106195369419786406424539534548950029402032)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2026558437563172144763323891695492438824580981354311800377615877722174852110
                                   :Y 3175228622827355252131794249375589958819237728976644114668835577115207253974
                                   :Z 1703537650723208037431605818790567212969945172904002086508624288846620425330)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 3911083886969116240673004845376555183008865591785889822828646248764281212
                                   :Y 3418295182060676784286679825731574704620358637071579798401744482121888390824
                                   :Z 2227193126071463799798832006820464328730357034690395911617459833718322844512)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1306267953894440976162228079682071445463068203341551342138163766584451067179
                                   :Y 2955726091738837008261837510235357120682078374268041631217352979942809568169
                                   :Z 3533650289988153255396344193154004341769520734471025689560632486193816572059)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 441228445009513187661721265720763714856039089012830751129181548430551837321
                                   :Y 13720233656168845197120661060806508559467528912788733709030329777059781814
                                   :Z 1407217045145216220357773561359388832196736862893405516121267880113440879582)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2080312532010041455011605676667671100469381776914458439773898714076035471395
                                   :Y 2950320921014751979037534293496239331360969450258221777769231399100347389357
                                   :Z 3540530350248919206532886527192717817379608417289221792128255277977968213035)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2470637126009133304792253143956901752910577610932067245554539496672441216148
                                   :Y 2704541793802968630501727823125201728882596789764908604708080386891795113163
                                   :Z 3554369237539808403470517160494814345271348433267213145876741153772517125606)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2202110592368133840211548755766972687094082258562729530726098472423603150738
                                   :Y 3466285427390117752583693356453611724031694829851555259544986661676462889872
                                   :Z 2458320933900392027416181479266797832911927376071245992789370957310289182409)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1703175440048148832427810566177391287366765665229995570731416156397547135552
                                   :Y 2940334333194321720494285252145269809500141069594736529634180454802538518808
                                   :Z 548066759184844071928236058206433525433754532995835835265707415994136916916)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 3363716137297053223946100667500259525792549420720299883277062353338186568975
                                   :Y 2186421049389506697732195501848490170371945501632466270009774778477611190378
                                   :Z 3438056129954776639428445435994129835297191431816191558600177156308330067645)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 3096295252190295542313768680458853141674694716324868674147170560957600128423
                                   :Y 1663922509445406657268338685100403605602137830376136630599086295809726586374
                                   :Z 90279181950882188934234541905605051786400764393556432256804125953172448710)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2527088450121221996882730192429927007020993879728406858352826523057136338394
                                   :Y 2516667953769585413435339405932044794676567062678323027804365243822385888378
                                   :Z 1344061277363975598531544798147071751949566618649357865837694269402366997331)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 648110394772570018545339058362614939843160195052734347016591145469272068206
                                   :Y 2554038101858319819758694616426093224118725623953662100954478131962523692737
                                   :Z 484131217744428709992368010198761712787916433475245312482752126383887924501)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1185365528175381981844553224414494091327097839102636417408126700127079935971
                                   :Y 2718984965057960254875500665249172897816090185042261842605091310080836065498
                                   :Z 435400111576964185353200006309341624701665620598816412816855367419198902687)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 3157834163259875293428250102141465344478917205733497130761720544357671605550
                                   :Y 3355062234034087181528567343187917742552888002534265868138318635858268157267
                                   :Z 13299386458405499173454279162938684140759235539624236842677072412855140343)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2603678995505414819252077745783007032433564338781597343529893199097633856126
                                   :Y 1467864437481961503244415798784975730813214461988794710661798674500544810910
                                   :Z 1283301282020527893575490836791822738929617827039034230085066251862056284464)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 140362336702508317920734103991170983363832917017686687641578156634040667693
                                   :Y 2174170782933920561466947518550126461035625557379649083142496395997393238196
                                   :Z 1263774018125373104062455237353618938395685811593156836110619877158323300505)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1537167959406834640249111096124323167159576094896602442271161040797635223031
                                   :Y 3448894487779477422307653500449296102202477352481691883235226526584705093591
                                   :Z 3153746887032911076749691891194954158215706219890687486507658164509121949003)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2216485381399344540115783205875416576696510535861561734578461800375137008702
                                   :Y 726648701613423297346032073305000203355198007613879888825716336738236911084
                                   :Z 2781546392203448726508264327772397648977570404035419092910297735563542912904)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1349767426233465808445012823977521286044641216920009433352920271427189756197
                                   :Y 3284933034111860486355665838943672001976694110781541745494080069605474542366
                                   :Z 2881011932699976388933684426189017487078002335635232480252020243611027129207)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 235969188729511627307034404344211263217146311306249370744131075477590366520
                                   :Y 914591956044951062620849920031000756308745326116975057276153867870737326864
                                   :Z 1535814590157718718096054720658957740869267820684105091314911743706845066678)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1418423544625635358061733296600755497018764268849381320847923989367359248350
                                   :Y 37173247489106030207157708994782380069123252153341678860767162994439567566
                                   :Z 2117529078717784809701935125529970791845031149307472647779207954433203307952)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1695211761246025690623485513681691191775055348821036524317881087142901302057
                                   :Y 2396150593032018789502670872666442811825469692432496041123765414324947668809
                                   :Z 1663910768121878572819829369269170787484982836298012442156478631544906203141)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 605783568557546108006145393700805075441530756039638563156462544032528659548
                                   :Y 2742684536425897725227228815377399690845647981603744565270708596385914529420
                                   :Z 2129065636843698028500647365388104725248182050381958437195223635863224888143)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2581032500003436533228867983561575394465495644840665071591731339606406685150
                                   :Y 298728980753068798553261554962292400428159025931725790698646810839087304056
                                   :Z 2856869800687331043946865760046321371618465470969139850672701393519276669199)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 755623999313467952398487768707580489939921337894077565120997262922034290336
                                   :Y 20069619997423509672196438153193639818526030455625335009080327982676595105
                                   :Z 1080569659966179234095189630374937602401790353062953696449683284448614824876)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1967200222963397906895589609428485899940409376697690306453390271581127484308
                                   :Y 2225305800557468584115588017285223498357322436382106140480813174329379992259
                                   :Z 1053015585214045175921173597273003399170464904325079625748407283510935133710)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 498807339519657622450872880044158751977605751314494268661141670312792882062
                                   :Y 80317912650162459198248682089132458069680221928116025933403220708016663575
                                   :Z 13376339263035277300733406898792745313385002682323853257530248797678155716)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 2739197580391787059177758902956644811520907649827902183840113306939524370242
                                   :Y 909275852337821251690761487510383026214305334636590455674261078468427282603
                                   :Z 1625424628019795955993478284273648919508560938275638262435747413649070905006)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 344327948672451087301260275075702947046232685900247425844768532493220696568
                                   :Y 3353743416655022814137831973405356433986738894026632315628616372284279333697
                                   :Z 2370133529539578399403558693462813640227979592702049900372260435365692821027)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 1004046690532070345892489298182525479587662229943437433062291565087353148837
                                   :Y 71272820424708268925125484564338721964259336013992701377983907667422260393
                                   :Z 768612883303633165968236236148643363289350426259687383336273040547936080755)
         #S(EDWARDS-ECC:ED-PROJ-PT :X 257343624007227848734848331718183374318903777246793446280896454239116997035
                                   :Y 3559791859603445605363050947122976092902343821226965249290371350682370315179
                                   :Z 296434638121815007163580183345037929837977157971858366576139539079696541425)
         )))

(defvar *gs*        nil)
(defvar *hs*        nil)
(defvar *hpt*       nil)

(defun init-basis (&key (nbits *max-bit-length*)
                        (curve (ed-curve-name *edcurve*)))
  (cond (*bp-basis*
         (cond ((eql curve *curve*)
                (cond ((= nbits *nbits*)
                       *bp-basis*)
                      ((< nbits *nbits*)
                       (make-bp-basis
                        :curve  curve
                        :nbits  nbits
                        :hpt    *bhpt*
                        :gs     *bgs*
                        :hs     *bhs*))
                      (t
                       (make-bp-basis
                        :curve  curve
                        :nbits  nbits
                        :hpt    *bhpt*
                        :gs     (concatenate 'vector 
                                             (basis-pts (- nbits *nbits*))
                                             *bgs*)
                        :hs     (concatenate 'vector
                                             (basis-pts (- nbits *nbits*))
                                             *bhs*)))
                      ))
               (t
                (make-bp-basis
                 :curve  curve
                 :nbits  nbits
                 :hpt    (ed-projective (ed-random-generator))
                 :gs     (basis-pts nbits)
                 :hs     (basis-pts nbits)))
               ))

        (t
         (setf *bp-basis*
               (make-bp-basis
                :curve  curve
                :nbits  nbits
                :hpt    (ed-projective (ed-random-generator))
                :gs     (basis-pts nbits)
                :hs     (basis-pts nbits))
               ))
        ))

(defun do-with-basis (basis fn)
  (let ((*bp-basis*  basis))
    (with-ed-curve *curve*
      (with-mod *ed-r*
        (let* ((*hpt*  *bhpt*)
               (*gs*   *bgs*)
               (*hs*   *bhs*))
          (funcall fn))))))

(defmacro with-basis (basis &body body)
  `(do-with-basis ,basis
                  (lambda ()
                    ,@body)))

#+:LISPWORKS
(editor:setup-indent "with-basis" 1)

;; ---------------------------------------------------------------------

(defun make-range-proofs (&key (nbits *max-bit-length*)
                               vals)
  (with-basis (init-basis :nbits nbits)
    (let* ((prover (make-range-prover))
           (proofs nil)
           (gammas nil))
      (dolist (val vals)
        (multiple-value-bind (proof gamma)
            (funcall prover val)
          (push proof proofs)
          (push gamma gammas)))
      (let* ((sum-cmt (reduce 'ed-add
                              (mapcar (um:compose 'ed-decompress-pt 'range-proof-vcmt) proofs)
                              :initial-value (ed-neutral-point)))
             (sum-gamma (reduce 'm+ gammas)))
        (make-range-proof-block
         :basis     *bp-basis*
         :proofs    (nreverse proofs)
         :sum-cmt   (ed-compress-pt sum-cmt)
         :sum-gamma sum-gamma)
        ))))

(defmethod validate-range-proofs ((proof-block range-proof-block))
  (with-basis (range-proof-block-basis proof-block)
    (every 'internal-validate-range-proof (range-proof-block-proofs proof-block))))

;; -------------------------------------------------------------------
;; Transaction support -- fixed basis

(defmethod make-range-proof (val &key (gamma (rand-val)))
  (with-basis (init-basis :nbits *max-bit-length*)
    (let ((prover (make-range-prover)))
      (funcall prover val :gamma gamma))))

(defmethod validate-range-proof ((prf range-proof))
  (with-basis (init-basis :nbits *max-bit-length*)
    (internal-validate-range-proof prf)))

(defmethod proof-simple-commitment ((proof range-proof))
  "This is the item used to form the hash-lock on a send in a
transaction. Hash this value with the public key of the recipient to
lock it to the recipient."
  (range-proof-vcmt proof))

(defun hpt ()
  "Return the *hpt* curve point used to make Pedersen commitments"
  *bhpt*)

;; ------------------------------
;; Construct a range-prover for use on multiple values

(defun make-range-prover ()
  
  ;; let's compute the basis vectors just once, and share them
  (let* ((hpt   *hpt*)
         (hs    *hs*)
         (gs    *gs*)
         (nbits *nbits*))

    (labels
        ;; ---------------------------------------------
        ((make-range-proof (v &key (gamma (rand-val)))
           (check-type v     (integer 0))
           (check-type gamma (integer 1))
           (let* ((vcmt       (simple-commit hpt gamma v))
                  (vcmt-cmpr  (ed-compress-pt vcmt))
                  
                  (a_l        (bits-vector v nbits))
                  (a_r        (vec-decr a_l 1))
                  (alpha      (rand-val))
                  (acmt       (vec-commit hpt alpha hs a_r gs a_l))
                  (acmt-cmpr  (ed-compress-pt acmt))
                  
                  (s_l        (random-vec nbits))
                  (s_r        (random-vec nbits))
                  (rho        (rand-val))
                  (scmt       (vec-commit hpt rho hs s_r gs s_l))
                  (scmt-cmpr  (ed-compress-pt scmt))
                  
                  ;; publish Acmt, Scmt
                  
                  (y          (int (hash/256 vcmt-cmpr acmt-cmpr scmt-cmpr)))
                  (z          (int (hash/256 y)))
                  
                  (poly_l0    (vec-decr a_l z))
                  (poly_l1    s_l)
                  (poly_l     (vector poly_l0 poly_l1))
                  
                  (yvec       (pow-vec y nbits))
                  (zsq        (m* z z))
                  (poly_r0    (vec-add
                               (vec-hadamard-prod yvec
                                                  (vec-incr a_r z))
                               (vec-scale (twos-vec nbits) zsq)))
                  (poly_r1    (vec-hadamard-prod yvec s_r))
                  (poly_r     (vector poly_r0 poly_r1))              
                  
                  (poly_t     (poly-dot-prod poly_l poly_r))
                  (t1         (aref poly_t 1))
                  (t2         (aref poly_t 2))
                  
                  (tau1       (rand-val))
                  (tau2       (rand-val))
                  
                  (t1cmt      (simple-commit hpt tau1 t1))
                  (t1cmt-cmpr (ed-compress-pt t1cmt))
                  (t2cmt      (simple-commit hpt tau2 t2))
                  (t2cmt-cmpr (ed-compress-pt t2cmt))
                  
                  ;; publish T1cmt, T2cmt
                  
                  (x          (int (hash/256 t1cmt-cmpr t2cmt-cmpr)))
                  (lvec       (vec-add poly_l0 (vec-scale poly_l1 x)))
                  (rvec       (vec-add poly_r0 (vec-scale poly_r1 x)))
                  (t_hat      (vec-dot-prod lvec rvec))
                  (tau_x      (vec-dot-prod (pow-vec x 3)
                                            (vector (m* gamma zsq) tau1 tau2)))
                  (mu         (m+ alpha
                                  (m* rho x)))
                  
                  ;; publish tau_x, mu, t_hat, lvec, rvec
                  )
             (values
              (%make-range-proof
               ;; commitments
               :vcmt  vcmt-cmpr
               :acmt  acmt-cmpr
               :scmt  scmt-cmpr
               :t1cmt t1cmt-cmpr
               :t2cmt t2cmt-cmpr
               ;; parameters
               :tau_x tau_x
               :mu    mu
               :t_hat t_hat
               :dot-proof (make-lr-dot-prod-proof y mu t_hat lvec rvec)
               ;; challenge values x, y, z
               :x     x
               :y     y
               :z     z)
              gamma)
             )))
      
      ;; ---------------------------------------------------
      #'make-range-proof)))

;; ---------------------------------------------------------------------
;; Range proof validation

(defun internal-validate-range-proof (proof)
  (let* ((nbits     *nbits*)
         (y         (range-proof-y proof))
         (yvec      (pow-vec y nbits))
         (z         (range-proof-z proof))
         (zsq       (m* z z))
         (x         (range-proof-x proof))
         (xsq       (m* x x))
         (delta     (m- (m* (m- z zsq)
                            (reduce 'm+ yvec))
                        (m* (1- (ash 1 nbits))
                            (m* z zsq))))
         (chck-v-l  (simple-commit *hpt* (range-proof-tau_x proof)
                                   (range-proof-t_hat proof)))
         (vcmt      (ed-decompress-pt (range-proof-vcmt proof)))
         (t1cmt     (ed-decompress-pt (range-proof-t1cmt proof)))
         (t2cmt     (ed-decompress-pt (range-proof-t2cmt proof)))
         (chck-v-r  (ed-add (ed-mul vcmt zsq)
                            (ed-add (ed-nth-pt delta)
                                    (ed-add (ed-mul t1cmt x)
                                            (ed-mul t2cmt xsq))
                                    ))))
    (when (ed-pt= chck-v-l chck-v-r)
      (let* ((*hs*      (map 'vector 'ed-mul
                             *hs*
                               (pow-vec (m/ y) nbits)))
             (hpows     (vec-add (vec-scale yvec z)
                                 (vec-scale (twos-vec nbits) zsq)))
             (gpows     (vec-scale (ones-vec nbits) (m- z)))
             (acmt      (ed-decompress-pt (range-proof-acmt proof)))
             (scmt      (ed-decompress-pt (range-proof-scmt proof)))
             (chk-p-l   (ed-add acmt
                                (vec-commit scmt x
                                            *hs* hpows
                                            *gs* gpows)))
             (dot-proof (range-proof-dot-proof proof))
             (p         (ed-decompress-pt (dot-prod-proof-pcmt dot-proof))))
        
        (when (ed-pt= chk-p-l p)
          (fast-validate-dot-prod-proof dot-proof))
        ))))

;; -----------------------------------------------------------

(defun make-lr-dot-prod-proof (y mu t_hat lvec rvec)
  ;; set up conditions for range proofs to provide Bulletproofs on
  ;; vector dot products
  (let* ((nbits (length lvec))
         (*hs*  (map 'vector 'ed-mul
                     *hs*
                     (pow-vec (m/ y) nbits)))
         (u     (ed-mul *hpt* (m/ mu t_hat)))
         (p     (vec-commit *hpt* mu
                            *hs*  rvec
                            *gs*  lvec)))
    
    (make-dot-prod-proof u p lvec rvec)))


(defun make-dot-prod-proof (u pcmt a b)
  ;; for input vectors a, b, commitment p, aux arg u
  ;; global basis vectors g, h, order n = length g
  ;; n should be pow2
  ;;
  ;; construct proof that c = <a b> and P = g^a h^b u^c
  ;;
  (um:nlet-tail iter ((n  (length a))
                      (g  *gs*)
                      (h  *hs*)
                      (p  pcmt)
                      (a  a)
                      (b  b)
                      (accum nil))
    (if (eql 1 n)
        (%make-dot-prod-proof ;; validate as P = g^a h^b u^(a*b)
                              :u    (ed-compress-pt u)
                              :pcmt (ed-compress-pt pcmt)
                              :a    (aref a 0)
                              :b    (aref b 0)
                              :xlrs (nreverse accum))
      ;; else
      (let* ((n/2  (ash n -1))
             (gl   (subseq g 0 n/2))
             (gr   (subseq g n/2))
             (hl   (subseq h 0 n/2))
             (hr   (subseq h n/2))
             (al   (subseq a 0 n/2))
             (ar   (subseq a n/2))
             (bl   (subseq b 0 n/2))
             (br   (subseq b n/2))
             (cl   (vec-dot-prod al br))
             (cr   (vec-dot-prod ar bl))
             (l    (vec-commit u cl
                               hl br
                               gr al))
             (r    (vec-commit u cr
                               hr bl
                               gl ar))
             ;; publish L,R
             (lcmpr (ed-compress-pt l))
             (rcmpr (ed-compress-pt r))
             (x     (int (hash/256 lcmpr rcmpr))) ;; challenge x
             
             (invx  (m/ x))
             (gp    (map 'vector
                         (lambda (ptl ptr)
                           (ed-add
                            (ed-mul ptl invx)
                            (ed-mul ptr x)))
                         gl gr))
             (hp    (map 'vector
                         (lambda (ptl ptr)
                           (ed-add
                            (ed-mul ptl x)
                            (ed-mul ptr invx)))
                         hl hr))
             
             (xsq    (m* x x))
             (xsqinv (m/ xsq))
             (pp     (ed-add
                      (ed-mul l xsq)
                      (ed-add p
                              (ed-mul r xsqinv))))
             
             (ap     (vec-add
                      (vec-scale al x)
                      (vec-scale ar invx)))
             (bp     (vec-add
                      (vec-scale bl invx)
                      (vec-scale br x))))
        
        (iter n/2 gp hp pp ap bp
              (cons (list x lcmpr rcmpr) accum)))
      )))

;; -------------------------------------------------------
#|
  ;; not needed with fast validation running properly...
(defun validate-dot-prod-proof (proof)
  (let* ((u         (ed-decompress-pt (dot-prod-proof-u proof)))
         (p         (ed-decompress-pt (dot-prod-proof-pcmt proof)))
         (a         (dot-prod-proof-a proof))
         (b         (dot-prod-proof-b proof))
         (xlrs      (dot-prod-proof-xlrs proof)))
    (um:nlet-tail iter ((gs   *gs*)
                        (hs   *hs*)
                        (p    p)
                        (xlrs xlrs))
      (if (endp xlrs)
          (ed-pt= p (ed-add
                     (ed-mul (aref gs 0) a)
                     (ed-add
                      (ed-mul (aref hs 0) b)
                      (ed-mul u (m* a b)))))
        ;; else
        (destructuring-bind (x lcmpr rcmpr) (first xlrs)
          (let* ((l    (ed-decompress-pt lcmpr))
                 (r    (ed-decompress-pt rcmpr))
                 (n/2  (ash (length gs) -1))
                 (gl   (subseq gs 0 n/2))
                 (gr   (subseq gs n/2))
                 (hl   (subseq hs 0 n/2))
                 (hr   (subseq hs n/2))
                 (xsq  (m* x x))
                 (pp   (ed-add
                        (ed-mul l xsq)
                        (ed-add
                         p
                         (ed-mul r (m/ xsq)))))
                 
                 (invx  (m/ x))
                 (gp    (map 'vector
                             (lambda (ptl ptr)
                               (ed-add
                                (ed-mul ptl invx)
                                (ed-mul ptr x)))
                             gl gr))
                 (hp    (map 'vector
                             (lambda (ptl ptr)
                               (ed-add
                                (ed-mul ptl x)
                                (ed-mul ptr invx)))
                             hl hr)))
            (iter gp hp pp (cdr xlrs))))
        ))))
|#             
;; --------------------------------------------------------------

(defun compute-svec (xlrs nbits)
  (let ((svec (make-array nbits))
        (xs   (mapcar 'first xlrs)))
    (loop for ix from 0 below nbits
          do
          (setf (aref svec ix)
                (let ((prod 1))
                  (loop for jx from 0
                        for x in xs
                        do
                        (setf prod (m* prod
                                       (if (logbitp jx ix)
                                           x
                                         (m/ x)))))
                  prod)))
    svec))
  
(defun fast-validate-dot-prod-proof (proof)
  (let* ((nbits     *nbits*)
         (u         (ed-decompress-pt (dot-prod-proof-u proof)))
         (p         (ed-decompress-pt (dot-prod-proof-pcmt proof)))
         (a         (dot-prod-proof-a proof))
         (b         (dot-prod-proof-b proof))
         (xlrs      (reverse (dot-prod-proof-xlrs proof)))
         (sv        (compute-svec xlrs nbits))
         (svinv     (map 'vector 'm/ sv))
         (chk_l     (vec-commit u (m* a b)
                                *gs* (vec-scale sv a)
                                *hs* (vec-scale svinv b)))
         (chk_r     (reduce (lambda (ans triple)
                              (destructuring-bind (x lcmpr rcmpr) triple
                                (let ((xsq (m* x x))
                                      (l   (ed-decompress-pt lcmpr))
                                      (r   (ed-decompress-pt rcmpr)))
                                  (ed-add ans
                                          (ed-add
                                           (ed-mul l xsq)
                                           (ed-mul r (m/ xsq))))
                                  )))
                            xlrs
                            :initial-value p)))
    (ed-pt= chk_l chk_r)))

;; ----------------------------------------------------------------------
;; test it out
#|
(defun tst (nbits &rest vals)
  (let* ((proofs (apply 'make-range-proofs nbits vals)))
    (assert (validate-range-proofs proofs))
    proofs))

(defun timing-test (&optional (niter 10))
  (let* ((vals   (loop repeat niter collect (random-between 0 #.(ash 1 64))))
         (proofs (time (apply 'make-range-proofs 64 vals))))
    (assert (time (validate-range-proofs proofs)))
    proofs))
|#


;; range-proofs.lisp - blinded value range proofs
;;
;; DM/Emotiq  02/18
;; ------------------------------------------------------------------
#|
The MIT License

Copyright (c) 2018 Emotiq AG

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
|#
;; -------------------------------------------------------------------------
;; Compute a value range prover and verifier for use in validating
;; cryptographically blinded numbers. This version proves each bit of
;; the (integer) value. It produces a rather large structure of prime
;; number field integers, two per bit of every value being attested,
;; plus two more as cryptographic basis vector components for the
;; Pedersen Commitments offered for the value.
;;
;; Algorithm adapted to ECC crypto from the paper:
;;  "Bulletproofs: Short Proofs for Confidential Transactions and More" by
;;     Bunz, Bootle, Boneh, Poelstra, Wuille, and Maxwell.
;;       https://eprint.iacr.org/2017/1066.pdf

;; The code in this module now uses Bulletproofs for vector
;; dot-product proofs. That saves a considerable amount of memory.
;; Using Curve1174 with 252 bits per compressed ECC point, the cost is
;; roughly 1.4KB per proof, compared to a cost of 5.2KB for
;; non-Bulletproofs, atop an overhead in the basis vectors of around
;; 4.8KB.
;;
;; This code currently only provides list aggregation of proofs.
;; Algebraic aggregation will save even more memory, shrinking the
;; cost dramatically with an O(Log2(N)) cost on N-proof aggregates.

(in-package :range-proofs)

;; ------------------------------

(defvar *max-bit-length*  64)

;; ------------------------------------------------------------------

(defun rand-val ()
  ;; random value in Z_r
  (random-between 1 *ed-r*))

;; ------------------------------

(defun zero-vector (&optional (nel *max-bit-length*))
  ;; create a vector of zeros
  (make-array nel
              :initial-element 0))

(defun bits-vector (n &optional (nbits *max-bit-length*))
  ;; convert a value n into a bit vector. Each index into the vector
  ;; is the i'th bit of the value
  (let* ((arr (zero-vector nbits)))
    (loop for ix from 0 below nbits do
          (when (logbitp ix n)
            (setf (aref arr ix) 1)))
    arr))

(defun random-vec (&optional (nel *max-bit-length*))
  ;; construct a vector of unique random values
  (let ((vec (make-array nel)))
    (um:nlet-tail iter ((ix 0))
      (unless (>= ix nel)
        (let ((g  (rand-val)))
          (if (find g vec) ;; prob vanishingly small chance of duplication
              (iter ix)
            (progn
              (setf (aref vec ix) g)
              (iter (1+ ix))))
          )))
    vec))

(defun basis-pts (&optional (nel *max-bit-length*))
  ;; compute a vector of basis-vector curve points
  (let ((vec  (make-array nel)))
    (map-into vec (lambda (x)
                    (declare (ignore x))
                    (ed-projective (ed-random-generator)))
              vec)))

(defun pow-vec (y &optional (nel *max-bit-length*))
  ;; construct a vector of powers of y #(1 y y^2 ... y^(n-1))
  (let ((vec (make-array nel)))
    (do ((v  1  (m* v y))
         (ix 0  (1+ ix)))
        ((>= ix nel) vec)
      (setf (aref vec ix) v))))

(defun ones-vec (&optional (nel *max-bit-length*))
  ;; a vector of 1's
  (make-array nel :initial-element 1))

(defun twos-vec (&optional (nel *max-bit-length*))
  ;; a vector of powers of 2: #(1 2 2^2 2^3 ... 2^(n-1))
  (pow-vec 2 nel))

;; ------------------------------
;; Vector arithmetic over the modular prime field

(defun vec-decr (v k)
  (map 'vector (um:rcurry 'm- k) v))

(defun vec-incr (v k)
  (map 'vector (um:rcurry 'm+ k) v))

(defun vec-add (v1 v2)
  (map 'vector 'm+ v1 v2))

(defun vec-sub (v1 v2)
  (map 'vector 'm- v1 v2))

(defun vec-scale (v k)
  (map 'vector (um:curry 'm* k) v))

(defun vec-hadamard-prod (v1 v2)
  (map 'vector 'm* v1 v2))

(defun vec-dot-prod (v1 v2)
  (reduce 'm+ (vec-hadamard-prod v1 v2)))

;; ------------------------------

(defun poly-dot-prod (poly1 poly2)
  ;;
  ;; Produce a dot-product polynomial from two polynomials with vector
  ;; coeffs. Polynomials are vectors with element at index ix
  ;; representing the ix'th order coefficient. But these coefficients
  ;; are themselves vectors of prime field integers.
  ;;
  (let ((vec   (make-array (+ (length poly1) (length poly2) -1)
                           :initial-element 0)))
    (loop for v1 across poly1
          for ix from 0
          do
          (loop for v2 across poly2
                for jx from ix
                do
                (setf (aref vec jx)
                      (m+ (aref vec jx)
                          (vec-dot-prod v1 v2)))
                ))
    vec))

;; ------------------------------
;; Pedersen Commitments

(defun simple-commit (hpt blind val)
  ;; commit to a value val with blinding blind*Hpt
  (ed-add (ed-mul hpt blind)
          (ed-nth-pt val)))

(defun vec-commit (hpt blind hs hvec gs gvec)
  ;; form a vector commitment with basis vector gs,
  ;; blinding vector hs, and blinding term blind*Hpt
  (let ((pt (ed-mul hpt blind)))
    (loop for h across hs
          for hv across hvec
          for g across gs
          for gv across gvec
          do
          (setf pt (ed-add pt
                           (ed-add (ed-mul h hv)
                                   (ed-mul g gv)))))
    pt))

;; ------------------------------

(defstruct range-proof-block
  ;; curve and basis vectors
  basis
  proofs)

(defstruct (range-proof
            (:constructor %make-range-proof))
  ;; commitments
  vcmt acmt scmt t1cmt t2cmt
  ;; parameters
  tau_x mu t_hat
  ;; left, right vectors
  dot-proof
  ;; challenge values (Shamir-Fiat hash values)
  x y z)

(defstruct (dot-prod-proof
            (:constructor %make-dot-prod-proof))
  u pcmt a b xlrs)

;; ------------------------------

(defstruct bp-basis
  curve nbits hpt gs hs)

(define-symbol-macro *bhpt*    (bp-basis-hpt    *bp-basis*))
(define-symbol-macro *bgs*     (bp-basis-gs     *bp-basis*))
(define-symbol-macro *bhs*     (bp-basis-hs     *bp-basis*))
(define-symbol-macro *curve*   (bp-basis-curve  *bp-basis*))
(define-symbol-macro *nbits*   (bp-basis-nbits  *bp-basis*))

(defvar *bp-basis* 
  ;; define fully here for default basis so we have comparable proofs
  ;; across blockchain
  (make-bp-basis
     :CURVE :CURVE1174
     :NBITS 64
     :HPT #S(EDWARDS-ECC:ED-PROJ-PT :X 2527317417660803504051906437892571570044637137655710789896260670569217072856
                                    :Y 1156110630548974425894922513630112792474965292075279339088989889753530998376
                                    :Z 1202344900733838151026176607555134975221393578694691826171433671026407525551)
     :GS #(#S(EDWARDS-ECC:ED-PROJ-PT :X 1673846111251586799111695149052209297723703144295656312934666460746377042085
                                     :Y 1107584941875995327947100075969435687904168357734787694613660290215255378235
                                     :Z 393470143936712176152596619732248404021061458953018513814385429056428341708)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 973861341213121141148391722209422773409994498327768233761036647921677861449
                                     :Y 2667579551830149268260509892985774656390914054788631933237834802795617772869
                                     :Z 2739752120417183771992524831461954162173764763769163665618664088804250124093)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2452643269266484518854407464793572144314282970462566077305393989845187358650
                                     :Y 478987563837553877081885060615829289423654640232370229818645109119416801566
                                     :Z 3602620461772586604204653531871142164212492746334798646582863807728363991457)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 3602923997006242083410810378248570430545252866956612747896064487966490345361
                                     :Y 2668850091563085973239621748801429986205345821303461109403261582841210990857
                                     :Z 3252454112062439019101118860234834409587961878012710945859012739145979616820)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2971173658698735123012401907209592038213760653699813609572712215614400099065
                                     :Y 2485040993477578285179906331484611973932243011286010549951458581793477293307
                                     :Z 2034860650607121247157705417369033592375415426808245243016449021589910606855)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 488622321191046143028789060651512566180022925804166178468645155664620384392
                                     :Y 2159700996279499041096234534139449748109696184057039528710190013104894374134
                                     :Z 3142659197880974596830386841055606875723331366257563859804078851587276028021)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1521496305728845187979309272380533680544107055776671684365421754184506901604
                                     :Y 1264066655270830807247135624369651779704974847619181446590676054718122335526
                                     :Z 973231162811521448678321384935279904947224457778216340596220895425623129439)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 3024482682038555203551182821785298353224543713701619387419418627398436949371
                                     :Y 1802248651320914743425431745273800507180276903523457231247687709756394257676
                                     :Z 2635710999287465756248245114947174136126840996953772171484946739714702389193)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 523756985630837801941666868848030432613707975057924215070281978921548229046
                                     :Y 2263538933917063690829953231566653698470584516503542972696932513459934279626
                                     :Z 2362466420466228032673892265258783052782899073849242314922766971796619784462)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1290633755873975030996852512899052820184065323701776709047776684405309437539
                                     :Y 2140551855511583173896901429735082446520844307431723497062755023412225756667
                                     :Z 2787145368072154724386038732393169808861611644961624748247855756841932931010)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2969175145203586814793450867085479186439914662379450300182219076538799073208
                                     :Y 2779115490473453180031783376013091375203678087221412066689728124123825205019
                                     :Z 2919392904394919708870181676918873439588497016932720711025548686186783438443)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 3596116779285399041432131603673867287479222423418558434302460923197185336608
                                     :Y 2304553905586503632705547137601387551645081487756785837418727535973720335766
                                     :Z 73050665850343202577466561141879196446708227567522747630873124662516668260)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2718706025080376152918812815445150032381644566390684766569948249349991564547
                                     :Y 79375763306622294268916281227519230881276164193723638791678597798592750033
                                     :Z 3220719169449188840886233738255463637671568640409941591423633754915148347243)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1192370147776814796886034857210187195539958772836028894670509335235136349223
                                     :Y 3370084052685732742906558774481599519156639441285001763303947914487609795076
                                     :Z 2151753764501640939298948875975305769549802305106390350220584894831829580224)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 3351567357263813888299250159609153388395197986964258079091928199846493416290
                                     :Y 1644163087748217492367384225454545163463294102521224700767527537648818401435
                                     :Z 2678294685155228769573838534857361447317772371376386988400052087695038194297)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1647859330554222311451229219623729670784490499618344669795595949039356514615
                                     :Y 3074420179969582237020246569745301347742326697445351942231893251429802953531
                                     :Z 3025876613141173618605014813789262426233602870775717581747041086036295100750)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 830914004272550039219601542315002895137574921262192460672245922517975320705
                                     :Y 3418420325014248774574951017346488622273846859266326314278098580448123543645
                                     :Z 1536434948058751922026990544864986007539314249293021153341944964493083600531)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2032203835528915543768619146987250609571723974591846318722849892391256569322
                                     :Y 3038996856131962896970053656382070507366961560204559303368863259368164416847
                                     :Z 551487187577526893731126608526831834982041895634744170482674842424795576591)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2518974221086250972131081363419156973433699685240338571605312916852844495984
                                     :Y 3245852191143946812774615005195234128149199224791073909449817259692869208686
                                     :Z 1930194385406511263720276027454797549151101493976119281719358169892801476375)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1801781449767000660042254020064629570439875436319794925921032258717441270761
                                     :Y 1141512517057537154046278900575716829749284450962203089965385997052313222240
                                     :Z 2016539408065448825912644004571648265902934814596347580519069489703668922229)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 3168147621186975806911811683506198219101911432004391271984044911325348558880
                                     :Y 2763325621083138167816660877719651947740940292705895223254323190696362848034
                                     :Z 1150758821286823599115349855596094485979817832702147326818875742137169314857)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2492132066238278728051860465747946619920736018709835926989415683386006996489
                                     :Y 3271489915200883058544620448982048928611312780868063816368179895259127562387
                                     :Z 1874570882186414532623053946446856809112329068057361249189373234622915869873)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1025577265053102429015620699690817157091406819625202842053449231031467750872
                                     :Y 3303466230463191833787624779165504840565728326791002649007219970549702979454
                                     :Z 1199640197185991719713351083893150781523417501007650241093394961336670113905)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1871567735322810844933558331502465139391777086235977948534752507524074613658
                                     :Y 2249410895386029800113491471956837540190464566436520944785265458605101574776
                                     :Z 2412858442043985526402955265065064222600321491936998413043168496715328498887)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2930808256941303147680313972712047596718487130494685288111026903997042162967
                                     :Y 3031355423028345732824515229411824524203242866640570684435490003491987163542
                                     :Z 3163325804318206953895238484953764981423555923645952952589384284902150700587)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1139776860993198540439689856870928497056404008827230509970979932812109086965
                                     :Y 2306587044006641066975663764080441350578131517984532597802673306037119062340
                                     :Z 3234698496094354142352819114220853686204889737462183349547605836151545878975)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 502781990754470453108003156793159847769526285625826620845240220064771865636
                                     :Y 3240178530198146005034200742907187731055343771765630349197812524950736046944
                                     :Z 1788731243774074104478335676064994294778594377554890441534715922758935302421)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 5338975387983603057749734604471578237798339757789230419641101389008215513
                                     :Y 1165293753332876015570754041543469974587416857068115991158044487069476673129
                                     :Z 1484870972259100082600404743198222799777489176738114941775662683235960974850)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1481607470918353584661676447547063180605583188993671903237288522295305275910
                                     :Y 2035447483947919925629044462431342938329070285659179088883558059365182931049
                                     :Z 3072248663651831976699876937705469654749079793965584467440834317235313015363)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 3461207850102174369259275865742485389694144795480015052607237808328513924656
                                     :Y 2659070906742277207238557645668152370356699286090693040730114139990031816167
                                     :Z 284661194833679773658342998552750296241193076148149648276716631731929534159)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2154101204776321033483187251873749192082518817450130435103556869903692371553
                                     :Y 1247916257961659094299399759252908218239233507861664172573240144596297005667
                                     :Z 1303015028211334216559420192654718240586493715370236214876715348600586238871)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 3003440951029517866296626849902138294263700443394754245195947092673184664639
                                     :Y 1532458698271918740821747640400170834812512233363933409460573781849086620733
                                     :Z 1415695162936507783152141954353617019861509787319105225025331218141907216703)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2654338919904529423249446093713150695124222775148350420134311027499812888478
                                     :Y 1805472767973833350824273974342547343249782212013519995506767335907375963932
                                     :Z 112403625032185057265312294516978258013228730560599181531039223278815094382)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 571527316058293315521903882879253269188898245351313453736287279831290871363
                                     :Y 337294086931666234711710933910570303727109954943983426211137645364570228414
                                     :Z 2639111669285726640749325261595764633982025449490261489720739597497738508976)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2595071087292492211301218893236858672607469427293774160766511949572668134409
                                     :Y 1270761292819905289747943846125275137643450222594952978411307421416578285321
                                     :Z 709311320972332158357348863246682538759463702543733700644844930169568975980)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2863201121071199213789030285039245108101726296080769012724463857446276534859
                                     :Y 2546131774124422422633610145317127184778241579709416971356282730244769301702
                                     :Z 3060053665566897687658713693683065072766522302789336549277687115262231070348)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2825232204785751952840166039547825950816828073629127981860163612183104415292
                                     :Y 1064279445118704352035581433133972567301101795313374050466981065723794058755
                                     :Z 943397023146085256579741369928822486999432586997135563791264572093359214691)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 3272115553858387455197723557701681120901969601437069856142529677351277843365
                                     :Y 1706260292156629125032383815480715551140679639338037101137867283337562081702
                                     :Z 1879808182420284495128006933329453176229467393088808826546396701380397799153)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1504080442660813394334872637131588665978809079370802627400110653692125857530
                                     :Y 2295863545076809477001034693721834376833344445414896314331010140969911995173
                                     :Z 164837913460329279792853327700547417910763439442661777460153173716982487806)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1916167947772301569567343331373386860660185516651316118850631595275478807288
                                     :Y 2289603831885339302658321601897017352120841893941320446656951658012942420912
                                     :Z 2154126372117316408213579948610099257444100682079005560349812778269873116)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2207512248382744732799800750007015880475988943573185799538357171394026152589
                                     :Y 3207671411208152854775562751735144989188864632139569025732894145133662799186
                                     :Z 147651214812572267481942190337307409948858998073374983729200349823635277254)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1166319841809392207175856380807886860646246045499972509823474266764455368428
                                     :Y 1900918182733477336611890594988047861320198241632127042335950349561021459658
                                     :Z 3369415169255946879683526538812325488333544937971470210230055465210394164139)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1473731609056785794031128165139035290000600735614596204275381723550989407108
                                     :Y 56833866368252791144388009745034042543139045273277126813930863776092534801
                                     :Z 1051771413634082477724768968481440468146493416538541421786730424499162683327)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2777090116136947686051794670156108628083407016555991016416347754681918758308
                                     :Y 962615055629812949619364680218505403679312760283752642391645497500939318823
                                     :Z 3012716470180867268959514576319767103264925747150368977342655304900589879221)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1540651087240973018403236987791701544579230080725754307617081058052289331045
                                     :Y 1532327918503198290853615799429398215884567476144476774567413341607420532336
                                     :Z 1648885617488098426486437456094366941624114075084862117765425364815437326854)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1764323525315967824149787927824894192665450418106738891109630302985716215532
                                     :Y 1551796095613277943802263375485152902683408984291870545179308256262656945843
                                     :Z 1647256448433236550312750295315906324963303864259985494168232554272776477449)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1546314754128906272283812371908041665475894363524407013976135431103774784265
                                     :Y 302477948782550592386757233128597006079573206364323932710473210000523920634
                                     :Z 228665146722481253640536960068451767027600706594341382242759919985977643333)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1988417508203159925210263435985990772894253788847100195260972517983241406889
                                     :Y 1851117417439425433166929861414667002705343269320087074062638248553858204555
                                     :Z 1354252141281012520268781047961217356776085224865873811406937350320975310907)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2140223213833923932213005659321925304505182660490931585926781221462332708358
                                     :Y 2831027373059116266483273600208732944881628856090784804562196979682402280661
                                     :Z 941225413289791759329629574395528350391064014133662403471922324215717921768)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 858961193816889594608454632311799353123850122928707608273815260956095751672
                                     :Y 2345241255271255228371590230889492676884591391304671152740629143836884701736
                                     :Z 2706445779924399116301106730375684997065560833317490687715145289244190395809)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2574129200614082982569450223695791562434198863678574363505367984716305476782
                                     :Y 3220625726727187014477382393695885732230947944211193347443062656056765739606
                                     :Z 471859406530928425793592965025311153597013782161956710992525303815039065636)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 184002558000114384648002003900762747759809071043376353647943361371786233753
                                     :Y 2978131061608642603203248020105737698459794247969825619372023692293430270727
                                     :Z 2664925449252622225350808861587672175683984504769992571397393150326877320950)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1299426091183969727553084823902426115666748418749695532474866892566859149379
                                     :Y 2418204184381629503799422955410164850547617067465320667553921024695100337865
                                     :Z 1328759835764540541313244126026017721982786261858834680755906816284264038391)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2665488413597285161896339718324565396066429843497666141578777308622443794514
                                     :Y 2618854338857967696374236559957134641512246076348909834001566228464094388331
                                     :Z 257102524140833110738517571630655607137094159544747806367085625251463270546)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1404855841510160062758964507977505336143691261753769252415713914366165965279
                                     :Y 2267293125490940488365302738078770817442294775367213442522102406643978287656
                                     :Z 3037726723923048384518508051966869839477141274822132970036645887687543818528)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2504813208126575514836606644789926688460414455708434677953362838876298770053
                                     :Y 3433905451040724825270823077870022193474958617992951359099939736504802843398
                                     :Z 1708176427801690369316934286485826262235196699816349898181824211819325482259)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2061853774661485450514962546726826500474655786097755505998388746077778119163
                                     :Y 764211484104382111765799888718921966616840105545286647173793055779114656488
                                     :Z 297858316197043459353386625776520189781001800485785773052889089285312166407)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 152565120215544962826102493344747833406228697434095344212552174050880428651
                                     :Y 1157742407334889209370322801100808650799144118317904709248504078562015000007
                                     :Z 760925334028363138417738646387483011714313067296566043744288187500932725106)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2952929925437105915621635816597032289055717346095871485782567432736608847192
                                     :Y 2575248796046788370055922896584683284214618091281371672739140306789943131552
                                     :Z 2593465699439587761762724153993626497835755658833897801175081286162915696274)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1316802983715810148658415252344643510076434886279733250186160908397103564958
                                     :Y 2795663469276915246413990222403750189344243275551337031182782663736727348694
                                     :Z 2715261729028091282147454350871241471247828252314842404546196368031208915963)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2043312982905216405912076200814503547677101857641840704939027218779865953033
                                     :Y 3317948650699293836074013922191048097559008327331835055173981769946446125908
                                     :Z 457453619270234393680609801277803981157641222784260822902285353052779107024)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2093373343383470871366311573579513073500113249427246552479443144572057549090
                                     :Y 3287248063104256159438052224585597103137529798392368939910055415048077569045
                                     :Z 74991343678217836203959139303833531835022445598201641712319876312319428815)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 3322226249252994084222374793681105459194679647117160737203462196766760447505
                                     :Y 1618325815450173016763779077757141049865270651652366958429373457003603702728
                                     :Z 120243534952907230219652897813453045226094898890800564732142413854496278226)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1350539797402161518470441553517862018528516123368940021520692027303309536356
                                     :Y 3111250195578335990629585247508009109217606244849000960983521357108204004342
                                     :Z 1752385746776590237483395936871250052106307183814852710147153261111959808120))
     :HS #(#S(EDWARDS-ECC:ED-PROJ-PT :X 8540513968329104182381807523200964670639427264543819192732860043068476221
                                     :Y 3476611427178726742509019466861053213757551729750647867196962828341841323517
                                     :Z 3016500269717760632412724426894711282765211133377105187809553146261894098006)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 808292368762776790242716303301900795476339622892896915987284583912249422568
                                     :Y 3556362350736383028655360826333447965332642807289577455925626106446967708065
                                     :Z 733003769979279286737597477584410679432427852722503011780127199486977084870)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2867263802493330584105114944089474633217239366257117658794687996494150834322
                                     :Y 291215361785470787499490314111237947111481186742299356561430776070128399378
                                     :Z 2599593470628665985857622557588667662403835623859089652050777371522764235513)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2563311749741534799798307292367017909434564704408882724396596782511595772855
                                     :Y 160575939141693635570814139188975643133021801528467815016195464525876767857
                                     :Z 674596061662055069610764122460580978702163744904708114840621258389736260284)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 3009503128783111917341181254705604554759895991339144071074436518067213330391
                                     :Y 206564047129068633354106105847848889259439050974858019466858547996659101253
                                     :Z 2760151731349288692930337771063230630260897537804929194889404739031709603533)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 202436542324352765377496406541499208626387528591804487829210555952233677819
                                     :Y 3450958612542767055897669743717929537923683529315952466527214835023567564181
                                     :Z 427598011347486435888456680254323172208679248054281506285769276718721056140)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1321896675422221001811838679053465793791487063030280089085608561794042758845
                                     :Y 45297955701100862822908853569225235050625466503056736640993961628935033911
                                     :Z 1678285288403931159985469159864623066209001603267632072654381214598071263931)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 422876915979844981455706369098931493294187692045225906999618239296824922633
                                     :Y 3350629531673686242919618330111553816938991304476820871293199967989516673176
                                     :Z 1649348132276321534464128051571831010296883436598931659490918638168387665365)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1517355182101107745508430870814362806326736403772014614502729042392763954739
                                     :Y 495668177674932794003792623144131614694878036005676496479175384968034250062
                                     :Z 1459971153379735446562807811977352426523325502183995508135768132014160398235)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2497690256191765405691127927487285594068955423514842312200651107985452672304
                                     :Y 1185512994902605591985780189170462172403162166628959234956747291437045280868
                                     :Z 81427613942002527884528362052799048925978908443106151100643488062212107500)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2807422518158984042387562189834815656090340811479072658874328020511267589664
                                     :Y 3469785127737496032950076934353181823753189404184135410931053418733267242958
                                     :Z 2644084531972403513108234552508107880783216590410800837936599726756098688377)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2833440334644633753205852985067876225491511789807200517867815872404758598876
                                     :Y 2966298001719639987601378879201024996063633220207238250304282851280038949358
                                     :Z 3362109679951684591196784306291981337088692458997085449086237984375429077971)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 343150898828750443793411927322870774617944972869636940989856895143439353147
                                     :Y 3475683264134595482853171876042801153430664256486484264572190385871466405839
                                     :Z 961970157180117021639542596197954839914277984924763774031829039150150828045)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 3527903369762791227555112430507975725708453323902834212386724475125209999658
                                     :Y 3279104539677214724577566713359339325567065598544977861467571418831971824296
                                     :Z 526748898784420366184690148849236310133335325460922424943110833538827385262)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 3196248071028340504358346195235639747010288579580448487935193374160902611380
                                     :Y 257099714202017540906140639969897561690403036459808181459403969243829888368
                                     :Z 1155478721562077813572788297466441378737946154424908974854159490700113618364)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 910362622584275728261552968858586324081524451335843705241946441631510134715
                                     :Y 1052745157387615855829890154050002463205596223163517820251784725950971506637
                                     :Z 2072628466336888324038768138968779469096141950578934128527363793939350703320)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1670320769066875816302402242337263267083083490683796087887984533711490699383
                                     :Y 1026122344303236998117227186913830479425102339349087659379464759751321826781
                                     :Z 1573633159364137713802710582143997715041688728343231185677754894842318351321)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 3152057492760236003042249087948154699803249279355067910953214144466965302794
                                     :Y 2325016536902990498374875999373778027559495813762684216272420956311636954465
                                     :Z 804508159548173148617179931403962146622181039143378635803725042581193023099)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1675979885045678906491901105467163034668586695425773261271511490695727524534
                                     :Y 3529729009946364604891622442038610305543780674514579913163383550940900153058
                                     :Z 3387116154409674841631040239929710729284895323145039769902931475232877474493)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1126541287898494535275399018749126157158249724651634134999413024191795493215
                                     :Y 1023928939727353521907578089318411263090815468453030980632979394955843407200
                                     :Z 2269587240525839283570176294879489823631545623401411858012384157726643236148)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1245401805213400188605321232383136956880048559668458568451233557531659156647
                                     :Y 2288834579259941875059801368930858120854356591269749059948065897129454702942
                                     :Z 3105564424400853147242590721549129733170652939055950717466700249788012092426)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 3528326109487823315625418234943357209986711470392014948278714181657202895887
                                     :Y 3568551746142013767790587318512890164470529845171514780878700084126770084884
                                     :Z 1478419124131345495412644824467961663338827282355074686735056003974405742922)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1691200891550690392690926570383801056670547524673957953759525349273482981008
                                     :Y 1851862699384841187103710814675875695924680312426822561687590651081334508008
                                     :Z 715860889201996501974489078512415495640540117587729853626535801552850960448)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1715812156831919754177361269965099125412250960251052671419355235253193883992
                                     :Y 736473760329608058584097359471998802447939321349514146582108446259466036593
                                     :Z 219285849349603869108757575706025886954715795343914105716292036173309193980)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2741043906751275743136110320596789964683186186890775713525043510154496598608
                                     :Y 1232325371030402626095590213358011090773338479787996569945321606895473323812
                                     :Z 1636053778436913896276438370458716858296796840197509149162684100879476027234)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 470442539801789818655186847230414302991141325545995113132854498934683639894
                                     :Y 2380340888901247298729015892386121063637841017941569596246145480905877940402
                                     :Z 402628996355575744960999729473659938538499820372251260863990625047853338400)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1670137621383681477599272144959207613144784955270727703379667309027325998808
                                     :Y 89071409091474051366262524840226379300966318179878751119987962173259506729
                                     :Z 2269332909402304104612527831940873563640162158029010922839780168545950764536)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 493504765246241986716012375387059948376526643808065615878364306704584156796
                                     :Y 1493397593024405077818595652526202127794186605665250523867417146852234195594
                                     :Z 955687277928750593014473787333889351688848306632853943880678140628814958212)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 193013933089758587451274773564900603679044653506039637553845104549488777432
                                     :Y 3369252807834495352009739550329010944601556511517494000275534844749271123088
                                     :Z 2796882980980041011732209497026746944981301248537223516515577440587993489438)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 582635402593336392757181756359789086585754747355761506132706298687879654040
                                     :Y 1602353967410416329310722704972146682197212507656156731888419617158718405453
                                     :Z 2129146343638839610532877377880181421535389355334792614054134593424764829647)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 744258291214057474688203358700465479564426166017498054178170502290275523412
                                     :Y 2874646145310765938939748279592812524644365569123379183536161019556322124019
                                     :Z 2288446813946477479758823772090133214390142938956975547944804333134132125000)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2800166273238367494734346933921581210757825978837404404601402136796427337450
                                     :Y 2754024979040913749331576630548594172610858865275940918826702599453778971458
                                     :Z 2233721052209837063869894132112534064613853980161807327925439343687302480732)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 485229461272102226155802984854810921611535283164995443666155637769439612431
                                     :Y 2649693457417361282821831468548726061793935165561588530325566989527841182478
                                     :Z 2743899655671956754287446960527835906334990914274268283437088649362168012998)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 3330347743713557335851252284357573770235118728867128313167779388318683600312
                                     :Y 45683517265330547312473899150592497635317367980024005623929875381802900634
                                     :Z 1990128329253186463158531535496382270755882380356638932448883079791695903049)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2888744875068184678097311074929537391239744548865030785917147144851229544680
                                     :Y 611095860694036674395408120285406692422631003311442190498921598960937079906
                                     :Z 2559920630262368957768576624264267133799829029508342135990465332183409701790)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1910872760014830285693475272988264848468605927891953010609035144343696072669
                                     :Y 1443907091452283028246880000666432740338003471600782492079408998314435796005
                                     :Z 2142801408444503860867243635819310350366949050827508988130510192790551563801)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 3603279459491159473230291789076120284946281210353282949225968084811478965987
                                     :Y 3068560766192103477172643106650665018612441079946123753941052096547582755538
                                     :Z 2951446228816985595140649025562980532208128092025360822805572810021844855723)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2308295556679024811059711528051258589252421910768604909009300369181482593721
                                     :Y 2373872972111305823652752769353178636273825432693280672481848600814341753016
                                     :Z 3460730602527010823484237538643246529656146520963597269053113407188961993549)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 413256776245272957288459583949552795835863184111534925158555876820112019659
                                     :Y 2254382182371092483483440580020962970007843145563774274429963664641596334752
                                     :Z 437933030864302971423453119540510103382352054211840864404865035226201396933)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2490470002032850699295887448273880673295962334197829934363633729146189441723
                                     :Y 2019724495761812415500876603713271870208641572245004951605222694853231244722
                                     :Z 1043692570079597085649773613252733726905679272244693301266999389701840919459)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2642956303755748005690792282069271190077652274012875256185911121887944639441
                                     :Y 2606217764861399190337213205184082430414332596894420010677789039781392936150
                                     :Z 406916373907890681928569417288706227121383287041513811625103506788093976903)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1521287325754757186049558256040121579142391019008950555132155190518573803956
                                     :Y 2248229560414408853204907575904329564910869575212858357655979170361776018070
                                     :Z 3071604285118575789505269817602965271378776360816586419942006681929823432208)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1479967345485767009719058643424743808809646703444545153927770846598596256700
                                     :Y 3226691762078129678427288986516859836939631560576915717517349553797357650791
                                     :Z 2284901024433847022068068299368715403128072458608303613261299731355950411115)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 167199514514214762178900424268544015387150195609020971054366252988472042455
                                     :Y 1958697349038418367639187143399044812107732710960709376294759244575679544794
                                     :Z 840443043609498481566163396309495874024891254983562692896115227573527176444)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2825515731648253319228495109920874099055918218713725271709616903529254933452
                                     :Y 2877452759189270838799511418026825967622965956357837304976485092906993196172
                                     :Z 2802899639463169117557967522967131090147267372420420872528311166317255178693)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 787164898942116551210230362025898731502961379765622025556572100547820180645
                                     :Y 1043722782619559654457920632988424708059554780112285018739548284784510524203
                                     :Z 1766395529342917606884423478805771245082432444522858462020316757168861104618)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1135295522186096782488898786479061049780159515831059414495271822145415611976
                                     :Y 533420621856594782259292534076758063116266956931926765780514263883125249359
                                     :Z 3154101787151482549180374193290657921630143290773822193987178861631306648987)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 370816489727809912944620899850854548492456113129307945443987812340796357494
                                     :Y 1153029035191341532384117883064972693962912980555643672708520424837040369525
                                     :Z 3390149310204941001908677484985768296458181670176226376885618194076695500397)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 873460526756198869978612255588063433724586622186253585451319581308600976667
                                     :Y 54483446336865912705315188159771822775990539766972379724722417594282289105
                                     :Z 3566381484182282664442058864056170708458864945402482089877879728016791810586)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 3319225711866027618735746200059221347602006324903803956068572041377915420362
                                     :Y 1242187541209410538587825276146663897744852222700809502059755055698146000696
                                     :Z 1219667655246866171266935634655617344737863752363412691718938401565374311428)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1712588471388694883050761387351298990336433432414052270915160052440552796038
                                     :Y 900428572391365337919370141490200743699459695989658542131214747106422728560
                                     :Z 986367857284286539905440953676761502918941687791477375183170577167652735077)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 264806138996882274699725174736213406865370421674154724001970045172978863011
                                     :Y 1273989010359937172730824721441472474070585413840228693559588680929238916969
                                     :Z 1373582657819517919756819711838319357926311390606748390151379290795942722977)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2513164090260313132915200043672468514827617133263933514992095461076014673765
                                     :Y 2413535770864082938790353253768407245360556423340895502398949727441501820823
                                     :Z 1400635296140750823276888648753960937089399859797613184606336109858529699877)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2675019611283635229164879373783447468048953037776846498569558025212104551031
                                     :Y 60729791720453718978675976670208384530815888573071965859320310322623725448
                                     :Z 2690878089624336947704174420669546996087301054843232946669689218990708453197)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 3563399897573044925213495673278831665550263855410020630955796543787286977342
                                     :Y 2316420953807862818358450260830868743909890836300185069515538522556291320117
                                     :Z 3066079768533764945848709534144294957854544682319307497479071849727748504560)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 1911205061195397397824530257763154132646261674836728207692152449706631826986
                                     :Y 3506412498288455647896231414884546513741464930855681917143897503039419258944
                                     :Z 1931408973391909795650467799460329592732175531655005212878876160620233120242)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 843177952518083377987268728763386987233412033884089049827417732946549031055
                                     :Y 785613621750295733091942676356845927747828224561623210094801848358335849462
                                     :Z 3589607038125830065950231683421355842695023810376635427420086486459794611027)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 986674239518921194455237001520821680152843936824895361819229657362684376330
                                     :Y 3537460242350158406868009591540448310427690222724426384783827787620385659000
                                     :Z 174164995876183921397902059150050006038691921414892243643132654002138808341)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 981562193108561188893670440607947374513984864412372868591439957553497609160
                                     :Y 1383897808505874785947418790624201107511044751198243650118646590758192337999
                                     :Z 3211298793298905619252079113767739231635041862710276292202559535295560977431)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 3563407736434003370640760298580919740726800755888417408905417985445508108481
                                     :Y 1654178611843178920684220204114584153452175538077067489878171207091675411385
                                     :Z 2005205184005339326262742233035477434955542757636992398909083059337354333178)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2493861483270074581744504011803411551584864891258323859334888573480247708501
                                     :Y 2291035563082264129713653045134101466025022073079630788399461304955109957353
                                     :Z 25789072162635618744371557651343513525453193845696080779194533390112129705)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 281469499397034826717454330144278969867802595252480092680347485107451550842
                                     :Y 751428433577553499627408010821884548428869691809654157901699474056990175703
                                     :Z 3242950124906922806511548640442207775426647299406015711111286014170545653887)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2803708760720285823807388626381640406678927603598100452551687380368545055559
                                     :Y 2489608286738854749988339355516124688066313891786035280470990164106860638873
                                     :Z 3287200255253819530386210651832579912184585421875757969598696030785126140560)
           #S(EDWARDS-ECC:ED-PROJ-PT :X 2114908588082779872085978854007836150528709976826522455244124736321993519370
                                     :Y 2183864491773933914152365283793844015069633126521742285953915612218048605160
                                     :Z 3377276182619692695043767822281125724098927327330895989492066565060356871808)
           )))

(defvar *gs*        nil)
(defvar *hs*        nil)
(defvar *hpt*       nil)

(defun init-basis (&key (nbits *max-bit-length*)
                        (curve (ed-curve-name *edcurve*)))
  (cond (*bp-basis*
         (cond ((eql curve *curve*)
                (cond ((= nbits *nbits*)
                       *bp-basis*)
                      ((< nbits *nbits*)
                       (make-bp-basis
                        :curve  curve
                        :nbits  nbits
                        :hpt    *bhpt*
                        :gs     *bgs*
                        :hs     *bhs*))
                      (t
                       (make-bp-basis
                        :curve  curve
                        :nbits  nbits
                        :hpt    *bhpt*
                        :gs     (concatenate 'vector 
                                             (basis-pts (- nbits *nbits*))
                                             *bgs*)
                        :hs     (concatenate 'vector
                                             (basis-pts (- nbits *nbits*))
                                             *bhs*)))
                      ))
               (t
                (make-bp-basis
                 :curve  curve
                 :nbits  nbits
                 :hpt    (ed-projective (ed-random-generator))
                 :gs     (basis-pts nbits)
                 :hs     (basis-pts nbits)))
               ))

        (t
         (setf *bp-basis*
               (make-bp-basis
                :curve  curve
                :nbits  nbits
                :hpt    (ed-projective (ed-random-generator))
                :gs     (basis-pts nbits)
                :hs     (basis-pts nbits))
               ))
        ))

(defun make-range-proofs (nbits &rest vals)
  (let ((*bp-basis*  (init-basis :nbits nbits)))
    (with-ed-curve *curve*
      (with-mod *ed-r*
        (let* ((*hpt*  *bhpt*)
               (*gs*   *bgs*)
               (*hs*   *bhs*)
               (prover (make-range-prover :nbits nbits)))
          (make-range-proof-block
           :basis  *bp-basis*
           :proofs (mapcar prover vals))
          )))))

(defmethod validate-range-proofs ((proof-block range-proof-block))
  (let ((*bp-basis*  (range-proof-block-basis proof-block)))
    (with-ed-curve *curve*
      (with-mod *ed-r*
        (let* ((*hpt*  *bhpt*)
               (*gs*   *bgs*)
               (*hs*   *bhs*))
          (every 'validate-range-proof (range-proof-block-proofs proof-block))
          )))))

;; ------------------------------
;; Construct a range-prover for use on multiple values

(defun make-range-prover (&key (nbits *max-bit-length*))
  #-ccl
  (check-type nbits (fixnum 1))
  #+ccl
  (check-type nbits fixnum)
  
  ;; let's compute the basis vectors just once, and share them
  (let* ((hpt  *hpt*)
         (hs   *hs*)
         (gs   *gs*))

    (labels
        ;; ---------------------------------------------
        ((make-range-proof (v)
           (check-type v (integer 0))
           (assert (< v (ash 1 nbits)))
           (let* ((gamma      (rand-val))
                  (vcmt       (simple-commit hpt gamma v))
                  (vcmt-cmpr  (ed-compress-pt vcmt))
                  
                  (a_l        (bits-vector v nbits))
                  (a_r        (vec-decr a_l 1))
                  (alpha      (rand-val))
                  (acmt       (vec-commit hpt alpha hs a_r gs a_l))
                  (acmt-cmpr  (ed-compress-pt acmt))
                  
                  (s_l        (random-vec nbits))
                  (s_r        (random-vec nbits))
                  (rho        (rand-val))
                  (scmt       (vec-commit hpt rho hs s_r gs s_l))
                  (scmt-cmpr  (ed-compress-pt scmt))
                  
                  ;; publish Acmt, Scmt
                  
                  (y          (int (hash/256 vcmt-cmpr acmt-cmpr scmt-cmpr)))
                  (z          (int (hash/256 y)))
                  
                  (poly_l0    (vec-decr a_l z))
                  (poly_l1    s_l)
                  (poly_l     (vector poly_l0 poly_l1))
                  
                  (yvec       (pow-vec y nbits))
                  (zsq        (m* z z))
                  (poly_r0    (vec-add
                               (vec-hadamard-prod yvec
                                                  (vec-incr a_r z))
                               (vec-scale (twos-vec nbits) zsq)))
                  (poly_r1    (vec-hadamard-prod yvec s_r))
                  (poly_r     (vector poly_r0 poly_r1))              
                  
                  (poly_t     (poly-dot-prod poly_l poly_r))
                  (t1         (aref poly_t 1))
                  (t2         (aref poly_t 2))
                  
                  (tau1       (rand-val))
                  (tau2       (rand-val))
                  
                  (t1cmt      (simple-commit hpt tau1 t1))
                  (t1cmt-cmpr (ed-compress-pt t1cmt))
                  (t2cmt      (simple-commit hpt tau2 t2))
                  (t2cmt-cmpr (ed-compress-pt t2cmt))
                  
                  ;; publish T1cmt, T2cmt
                  
                  (x          (int (hash/256 t1cmt-cmpr t2cmt-cmpr)))
                  (lvec       (vec-add poly_l0 (vec-scale poly_l1 x)))
                  (rvec       (vec-add poly_r0 (vec-scale poly_r1 x)))
                  (t_hat      (vec-dot-prod lvec rvec))
                  (tau_x      (vec-dot-prod (pow-vec x 3)
                                            (vector (m* gamma zsq) tau1 tau2)))
                  (mu         (m+ alpha
                                  (m* rho x)))
                  
                  ;; publish tau_x, mu, t_hat, lvec, rvec
                  )
             (%make-range-proof
              ;; commitments
              :vcmt  vcmt-cmpr
              :acmt  acmt-cmpr
              :scmt  scmt-cmpr
              :t1cmt t1cmt-cmpr
              :t2cmt t2cmt-cmpr
              ;; parameters
              :tau_x tau_x
              :mu    mu
              :t_hat t_hat
              :dot-proof (make-lr-dot-prod-proof y mu t_hat lvec rvec)
              ;; challenge values x, y, z
              :x     x
              :y     y
              :z     z))
           ))
      
      ;; ---------------------------------------------------
      #'make-range-proof)))

;; ---------------------------------------------------------------------
;; Range proof validation

(defun validate-range-proof (proof)
  (let* ((nbits     *nbits*)
         (y         (range-proof-y proof))
         (yvec      (pow-vec y nbits))
         (z         (range-proof-z proof))
         (zsq       (m* z z))
         (x         (range-proof-x proof))
         (xsq       (m* x x))
         (delta     (m- (m* (m- z zsq)
                            (reduce 'm+ yvec))
                        (m* (1- (ash 1 nbits))
                            (m* z zsq))))
         (chck-v-l  (simple-commit *hpt* (range-proof-tau_x proof)
                                   (range-proof-t_hat proof)))
         (vcmt      (ed-decompress-pt (range-proof-vcmt proof)))
         (t1cmt     (ed-decompress-pt (range-proof-t1cmt proof)))
         (t2cmt     (ed-decompress-pt (range-proof-t2cmt proof)))
         (chck-v-r  (ed-add (ed-mul vcmt zsq)
                            (ed-add (ed-nth-pt delta)
                                    (ed-add (ed-mul t1cmt x)
                                            (ed-mul t2cmt xsq))
                                    ))))
    (when (ed-pt= chck-v-l chck-v-r)
      (let* ((*hs*      (map 'vector 'ed-mul
                             *hs*
                               (pow-vec (m/ y) nbits)))
             (hpows     (vec-add (vec-scale yvec z)
                                 (vec-scale (twos-vec nbits) zsq)))
             (gpows     (vec-scale (ones-vec nbits) (m- z)))
             (acmt      (ed-decompress-pt (range-proof-acmt proof)))
             (scmt      (ed-decompress-pt (range-proof-scmt proof)))
             (chk-p-l   (ed-add acmt
                                (vec-commit scmt x
                                            *hs* hpows
                                            *gs* gpows)))
             (dot-proof (range-proof-dot-proof proof))
             (p         (ed-decompress-pt (dot-prod-proof-pcmt dot-proof))))
        
        (when (ed-pt= chk-p-l p)
          (fast-validate-dot-prod-proof dot-proof))
        ))))

;; -----------------------------------------------------------

(defun make-lr-dot-prod-proof (y mu t_hat lvec rvec)
  ;; set up conditions for range proofs to provide Bulletproofs on
  ;; vector dot products
  (let* ((nbits (length lvec))
         (*hs*  (map 'vector 'ed-mul
                     *hs*
                     (pow-vec (m/ y) nbits)))
         (u     (ed-mul *hpt* (m/ mu t_hat)))
         (p     (vec-commit *hpt* mu
                            *hs*  rvec
                            *gs*  lvec)))
    
    (make-dot-prod-proof u p lvec rvec)))


(defun make-dot-prod-proof (u pcmt a b)
  ;; for input vectors a, b, commitment p, aux arg u
  ;; global basis vectors g, h, order n = length g
  ;; n should be pow2
  ;;
  ;; construct proof that c = <a b> and P = g^a h^b u^c
  ;;
  (um:nlet-tail iter ((n  (length a))
                      (g  *gs*)
                      (h  *hs*)
                      (p  pcmt)
                      (a  a)
                      (b  b)
                      (accum nil))
    (if (eql 1 n)
        (%make-dot-prod-proof ;; validate as P = g^a h^b u^(a*b)
                              :u    (ed-compress-pt u)
                              :pcmt (ed-compress-pt pcmt)
                              :a    (aref a 0)
                              :b    (aref b 0)
                              :xlrs (nreverse accum))
      ;; else
      (let* ((n/2  (ash n -1))
             (gl   (subseq g 0 n/2))
             (gr   (subseq g n/2))
             (hl   (subseq h 0 n/2))
             (hr   (subseq h n/2))
             (al   (subseq a 0 n/2))
             (ar   (subseq a n/2))
             (bl   (subseq b 0 n/2))
             (br   (subseq b n/2))
             (cl   (vec-dot-prod al br))
             (cr   (vec-dot-prod ar bl))
             (l    (vec-commit u cl
                               hl br
                               gr al))
             (r    (vec-commit u cr
                               hr bl
                               gl ar))
             ;; publish L,R
             (lcmpr (ed-compress-pt l))
             (rcmpr (ed-compress-pt r))
             (x     (int (hash/256 lcmpr rcmpr))) ;; challenge x
             
             (invx  (m/ x))
             (gp    (map 'vector
                         (lambda (ptl ptr)
                           (ed-add
                            (ed-mul ptl invx)
                            (ed-mul ptr x)))
                         gl gr))
             (hp    (map 'vector
                         (lambda (ptl ptr)
                           (ed-add
                            (ed-mul ptl x)
                            (ed-mul ptr invx)))
                         hl hr))
             
             (xsq    (m* x x))
             (xsqinv (m/ xsq))
             (pp     (ed-add
                      (ed-mul l xsq)
                      (ed-add p
                              (ed-mul r xsqinv))))
             
             (ap     (vec-add
                      (vec-scale al x)
                      (vec-scale ar invx)))
             (bp     (vec-add
                      (vec-scale bl invx)
                      (vec-scale br x))))
        
        (iter n/2 gp hp pp ap bp
              (cons (list x lcmpr rcmpr) accum)))
      )))

;; -------------------------------------------------------
#|
  ;; not needed with fast validation running properly...
(defun validate-dot-prod-proof (proof)
  (let* ((u         (ed-decompress-pt (dot-prod-proof-u proof)))
         (p         (ed-decompress-pt (dot-prod-proof-pcmt proof)))
         (a         (dot-prod-proof-a proof))
         (b         (dot-prod-proof-b proof))
         (xlrs      (dot-prod-proof-xlrs proof)))
    (um:nlet-tail iter ((gs   *gs*)
                        (hs   *hs*)
                        (p    p)
                        (xlrs xlrs))
      (if (endp xlrs)
          (ed-pt= p (ed-add
                     (ed-mul (aref gs 0) a)
                     (ed-add
                      (ed-mul (aref hs 0) b)
                      (ed-mul u (m* a b)))))
        ;; else
        (destructuring-bind (x lcmpr rcmpr) (first xlrs)
          (let* ((l    (ed-decompress-pt lcmpr))
                 (r    (ed-decompress-pt rcmpr))
                 (n/2  (ash (length gs) -1))
                 (gl   (subseq gs 0 n/2))
                 (gr   (subseq gs n/2))
                 (hl   (subseq hs 0 n/2))
                 (hr   (subseq hs n/2))
                 (xsq  (m* x x))
                 (pp   (ed-add
                        (ed-mul l xsq)
                        (ed-add
                         p
                         (ed-mul r (m/ xsq)))))
                 
                 (invx  (m/ x))
                 (gp    (map 'vector
                             (lambda (ptl ptr)
                               (ed-add
                                (ed-mul ptl invx)
                                (ed-mul ptr x)))
                             gl gr))
                 (hp    (map 'vector
                             (lambda (ptl ptr)
                               (ed-add
                                (ed-mul ptl x)
                                (ed-mul ptr invx)))
                             hl hr)))
            (iter gp hp pp (cdr xlrs))))
        ))))
|#             
;; --------------------------------------------------------------

(defun compute-svec (xlrs nbits)
  (let ((svec (make-array nbits))
        (xs   (mapcar 'first xlrs)))
    (loop for ix from 0 below nbits
          do
          (setf (aref svec ix)
                (let ((prod 1))
                  (loop for jx from 0
                        for x in xs
                        do
                        (setf prod (m* prod
                                       (if (logbitp jx ix)
                                           x
                                         (m/ x)))))
                  prod)))
    svec))
  
(defun fast-validate-dot-prod-proof (proof)
  (let* ((nbits     *nbits*)
         (u         (ed-decompress-pt (dot-prod-proof-u proof)))
         (p         (ed-decompress-pt (dot-prod-proof-pcmt proof)))
         (a         (dot-prod-proof-a proof))
         (b         (dot-prod-proof-b proof))
         (xlrs      (reverse (dot-prod-proof-xlrs proof)))
         (sv        (compute-svec xlrs nbits))
         (svinv     (map 'vector 'm/ sv))
         (chk_l     (vec-commit u (m* a b)
                                *gs* (vec-scale sv a)
                                *hs* (vec-scale svinv b)))
         (chk_r     (reduce (lambda (ans triple)
                              (destructuring-bind (x lcmpr rcmpr) triple
                                (let ((xsq (m* x x))
                                      (l   (ed-decompress-pt lcmpr))
                                      (r   (ed-decompress-pt rcmpr)))
                                  (ed-add ans
                                          (ed-add
                                           (ed-mul l xsq)
                                           (ed-mul r (m/ xsq))))
                                  )))
                            xlrs
                            :initial-value p)))
    (ed-pt= chk_l chk_r)))

;; ----------------------------------------------------------------------
;; test it out
#|
(defun tst (nbits &rest vals)
  (let* ((proofs (apply 'make-range-proofs nbits vals)))
    (assert (validate-range-proofs proofs))
    proofs))

(defun timing-test (&optional (niter 10))
  (let* ((vals   (loop repeat niter collect (random-between 0 #.(ash 1 64))))
         (proofs (time (apply 'make-range-proofs 64 vals))))
    (assert (time (validate-range-proofs proofs)))
    proofs))
|#


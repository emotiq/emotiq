;; range-proofs.lisp - blinded value range proofs
;;
;; DM/Emotiq  02/18
;; ------------------------------------------------------------------
#|
The MIT License

Copyright (c) 2018 Emotiq AG

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
|#
;; -------------------------------------------------------------------------
;; Compute a value range prover and verifier for use in validating
;; cryptographically blinded numbers. This version proves each bit of
;; the (integer) value. It produces a rather large structure of prime
;; number field integers, two per bit of every value being attested,
;; plus two more as cryptographic basis vector components for the
;; Pedersen Commitments offered for the value.
;;
;; Algorithm adapted to ECC crypto from the paper:
;;  "Bulletproofs: Short Proofs for Confidential Transactions and More" by
;;     Bunz, Bootle, Boneh, Poelstra, Wuille, and Maxwell.
;;       https://eprint.iacr.org/2017/1066.pdf

;; The code in this module now uses Bulletproofs for vector
;; dot-product proofs. That saves a considerable amount of memory.
;; Using Curve1174 with 252 bits per compressed ECC point, the cost is
;; roughly 1.4KB per proof, compared to a cost of 5.2KB for
;; non-Bulletproofs, atop an overhead in the basis vectors of around
;; 4.8KB.
;;
;; This code currently only provides list aggregation of proofs.
;; Algebraic aggregation will save even more memory, shrinking the
;; cost dramatically with an O(Log2(N)) cost on N-proof aggregates.

(in-package :range-proofs)

;; ------------------------------

(defvar *max-bit-length*  64)

;; ------------------------------------------------------------------

(defun rand-val ()
  ;; random value in Z_r
  (random-between 1 *ed-r*))

;; ------------------------------

(defun zero-vector (&optional (nel *max-bit-length*))
  ;; create a vector of zeros
  (make-array nel
              :initial-element 0))

(defun bits-vector (n &optional (nbits *max-bit-length*))
  ;; convert a value n into a bit vector. Each index into the vector
  ;; is the i'th bit of the value
  (let* ((arr (zero-vector nbits)))
    (loop for ix from 0 below nbits do
          (when (logbitp ix n)
            (setf (aref arr ix) 1)))
    arr))

(defun random-vec (&optional (nel *max-bit-length*))
  ;; construct a vector of unique random values
  (let ((vec (make-array nel)))
    (um:nlet-tail iter ((ix 0))
      (unless (>= ix nel)
        (let ((g  (rand-val)))
          (if (find g vec) ;; prob vanishingly small chance of duplication
              (iter ix)
            (progn
              (setf (aref vec ix) g)
              (iter (1+ ix))))
          )))
    vec))

(defun basis-pts (&optional (nel *max-bit-length*))
  ;; compute a vector of basis-vector curve points
  (let ((vec  (make-array nel)))
    (map-into vec (lambda (x)
                    (declare (ignore x))
                    (ed-mul (ed-random-generator) 1))
              vec)))

(defun pow-vec (y &optional (nel *max-bit-length*))
  ;; construct a vector of powers of y #(1 y y^2 ... y^(n-1))
  (let ((vec (make-array nel)))
    (do ((v  1  (m* v y))
         (ix 0  (1+ ix)))
        ((>= ix nel) vec)
      (setf (aref vec ix) v))))

(defun ones-vec (&optional (nel *max-bit-length*))
  ;; a vector of 1's
  (make-array nel :initial-element 1))

(defun twos-vec (&optional (nel *max-bit-length*))
  ;; a vector of powers of 2: #(1 2 2^2 2^3 ... 2^(n-1))
  (pow-vec 2 nel))

;; ------------------------------
;; Vector arithmetic over the modular prime field

(defun vec-decr (v k)
  (map 'vector (um:rcurry 'm- k) v))

(defun vec-incr (v k)
  (map 'vector (um:rcurry 'm+ k) v))

(defun vec-add (v1 v2)
  (map 'vector 'm+ v1 v2))

(defun vec-sub (v1 v2)
  (map 'vector 'm- v1 v2))

(defun vec-scale (v k)
  (map 'vector (um:curry 'm* k) v))

(defun vec-hadamard-prod (v1 v2)
  (map 'vector 'm* v1 v2))

(defun vec-dot-prod (v1 v2)
  (reduce 'm+ (vec-hadamard-prod v1 v2)))

;; ------------------------------

(defun poly-dot-prod (poly1 poly2)
  ;;
  ;; Produce a dot-product polynomial from two polynomials with vector
  ;; coeffs. Polynomials are vectors with element at index ix
  ;; representing the ix'th order coefficient. But these coefficients
  ;; are themselves vectors of prime field integers.
  ;;
  (let ((vec   (make-array (+ (length poly1) (length poly2) -1)
                           :initial-element 0)))
    (loop for v1 across poly1
          for ix from 0
          do
          (loop for v2 across poly2
                for jx from ix
                do
                (setf (aref vec jx)
                      (m+ (aref vec jx)
                          (vec-dot-prod v1 v2)))
                ))
    vec))

;; ------------------------------
;; Pedersen Commitments

(defun simple-commit (hpt blind val)
  ;; commit to a value val with blinding blind*Hpt
  (ed-add (ed-mul hpt blind)
          (ed-nth-pt val)))

(defun vec-commit (hpt blind hs hvec gs gvec)
  ;; form a vector commitment with basis vector gs,
  ;; blinding vector hs, and blinding term blind*Hpt
  (let ((pt (ed-mul hpt blind)))
    (loop for h across hs
          for hv across hvec
          for g across gs
          for gv across gvec
          do
          (setf pt (ed-add pt
                           (ed-add (ed-mul h hv)
                                   (ed-mul g gv)))))
    pt))

;; ------------------------------

(defstruct range-proof-block
  ;; curve and basis vectors
  basis
  proofs)

(defstruct (range-proof
            (:constructor %make-range-proof))
  ;; commitments
  vcmt acmt scmt t1cmt t2cmt
  ;; parameters
  tau_x mu t_hat
  ;; left, right vectors
  dot-proof
  ;; challenge values (Shamir-Fiat hash values)
  x y z)

(defstruct (dot-prod-proof
            (:constructor %make-dot-prod-proof))
  u pcmt a b xlrs)

;; ------------------------------

(defstruct bp-basis
  curve nbits hpt gs hs)

(define-symbol-macro *bhpt*    (bp-basis-hpt    *bp-basis*))
(define-symbol-macro *bgs*     (bp-basis-gs     *bp-basis*))
(define-symbol-macro *bhs*     (bp-basis-hs     *bp-basis*))
(define-symbol-macro *curve*   (bp-basis-curve  *bp-basis*))
(define-symbol-macro *nbits*   (bp-basis-nbits  *bp-basis*))

(defvar *bp-basis*
  ;; define fully here for default basis so we have comparable proofs
  ;; across blockchain
  (make-bp-basis
   :curve  :curve1174
   :nbits  64
   :hpt    #S(EDWARDS-ECC:ED-PROJ-PT :X 2755264875758394101137697250026944798288378305368589101256492462487064926211
                                     :Y 278718354396994401173219356728697087539062579154472337558177691954937095348
                                     :Z 245558367016907786954294824995074762178940472216093832551365197019960587187)
   
   :gs     #(#S(EDWARDS-ECC:ED-PROJ-PT :X 592183123604252682676048003010466248568450967861104764039407247225348567189
                                       :Y 1883490054336341592188948377251482187342869924073698667723019309928115534487
                                       :Z 2591576774070650385514045332551188443398896323172071732207565089021222265779)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 826205807083198233333586340210224164452951353419253374504147091824490075601
                                       :Y 492366339581473642835768355410323725966978309899607553415392901544099429374
                                       :Z 3121011922996066444621592136492291401485493595762150731197568921859275629788)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 1878862428385525869877306085584966672712121959197008395849631481387667070915
                                       :Y 3538285102510146172798425099744014317509150922381572325496065000447208792658
                                       :Z 2204581757931820609984284255986215773732975341467735958736927193044536423146)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 3037714665296121822911594522474256365766718473155513297647660621038868867493
                                       :Y 931449900786407313397599758794589736878903685086062208574587556902175601238
                                       :Z 2717396135823588078926382354664125679627164960806601341529639303046962252765)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 1029794201487577454745766857625107843003601493632410823340874282152940152443
                                       :Y 2972538011402175156525040480584956668772488809126931109656101665124560032525
                                       :Z 3507007159989647197768171838388931605542002937885298269638490508884483509905)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 265804671819457639771561602818898146693652128785154874070009791240361448000
                                       :Y 643036511090831987485211943992713588575908995123000944679059715924785322220
                                       :Z 1870850766731744033731557212716971852725373544775244212433293547290950519945)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 941646371094248912712693486840164072293806737331966432104218266587700705308
                                       :Y 1930514215538483641160836013120902814697290678361438125313009052812935790810
                                       :Z 1380344135123209078458193505061344519030141226267480978596493524399054973169)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 1805812543534217661483364840556933288496646383230316634890416904420160156000
                                       :Y 2338067028302411406374456873926420395828129969304168744224695690096748191689
                                       :Z 92181472586647614378534118153304815272386631733977833018139932952103931822)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 1570741085911273621712655887806304325706989304797646901041372030886231545338
                                       :Y 2215201892306420062510471995330989246355685438482768235419692711899618961956
                                       :Z 1361770303021508987998860351953898525047648525615855917501579067759362422438)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 765668564545797163140562400522969130395664304618178517757599642648969621419
                                       :Y 3075585646710425648999150759693866133326128453543060436126988390835545089611
                                       :Z 2421042666581264019357286640138633776080591513023458185650714599492429751732)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 2009284699019557400042180801609006430679607596686767238185909999046519529766
                                       :Y 1093110289949984344208883775855666680869273614441141173401054305709076493684
                                       :Z 811512992301892260198875720851507974149050944931145846130965528774579597252)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 3558294513481793963971547231982236349276746773500741808808510923078075535305
                                       :Y 1936464596343129057946518186610210727944658723795566812606407817385550012430
                                       :Z 1472676071904188989471607132230985619380169483966891700625655714073699063123)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 651938433351080490834104146996989759574827297312533785279582892296531482376
                                       :Y 651062710960409444913703057836827603502915364939645566952859903525780885190
                                       :Z 2456140276605154508158649398923681196137419800196685798008960808190475723856)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 2455860298542363198663276670764450804499375609333180422072483555947647781317
                                       :Y 217951909215984751891860972968476563747617969963474147525511987012242263763
                                       :Z 1171455020916443593824959144336705729492070199569397095244159128967290717089)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 1309051918924054508161242023725720962107104892180192010299394629689267951771
                                       :Y 1040944342098394438027205614983174216937537995710722963791944441946483840870
                                       :Z 3046774111084342041210063926845741177639427354270028565200884423065699113259)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 1318241072570147154595115934559631913632659399667868480718412459034458617668
                                       :Y 783372885914215777454293204820602513718375340133816595815608773134002121321
                                       :Z 826824068759471197759167702703397038286195627371504403405053085142837879430)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 103079685789401929153158694114270890775621869860265717142502590859217751811
                                       :Y 3178768174115215628507236660091725893795193107743627081374178670644495519651
                                       :Z 3175000167378726494739228267468018732467687859745911096216966969041613422669)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 2339284269716708145810063230267093059674383163828539273413663486676890989040
                                       :Y 2365097374790560030227615306884283828445969011600528331416631793543959241559
                                       :Z 122191072194602552094378833659517897405336173817760556640504558581314871205)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 1608117885826049313574949767723078113604929942986013421511025902894937969809
                                       :Y 1357750530798867127453224582504610773136079005243298951089779373895920596526
                                       :Z 392811639079538671824664367658530850603964313128625415086555372361066362986)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 2669973079313894454828103558671848658572413712711086987910504873433165392375
                                       :Y 1527602836596930369654189855640329976769093658874034354376205448016349064538
                                       :Z 2725843313845372252201366380767921633636478451523133928704297365202152045956)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 964878665401044813943530532174033408093721310616994751149932648075779510638
                                       :Y 1025744944831265562841628456527281045148293406254285568990692013333194463059
                                       :Z 714299001163352337731684499576137898286592881526756680023064108537904185616)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 1883746795638509873941910896122914225086702438233310526804095072947851864766
                                       :Y 656301870797141148907976512136170832492729847712427565685234182728370196587
                                       :Z 35589259902896446113259208790073969900671441588913824303437269459891250529)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 3235638701358207090848761171538931407794722082286766427882774113704314642629
                                       :Y 41577863786654057165435244707034612890805819673027076871238396540325127123
                                       :Z 1201896179024047028244773956709940517804869021727456040275469868127024818124)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 3079264994013667589204282330109410652937005878291360992017111652777719536543
                                       :Y 719131528755325290242410602285033586815447669055306273541227602822611139427
                                       :Z 1300713869682916234992515780088135645871440225262326310816526056062757512138)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 3052973644126926968668380888302164764511704953152879030076576671120676972553
                                       :Y 1754208847564191864735819868075272133186043774367273887551696454428216748001
                                       :Z 1389771003608564618220703492011080824884742922272197248494816944483194661594)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 291461938020685629121521465515330481554749380557974173608335344829809697917
                                       :Y 3603335117529357253550623842821273887700786951619070143648434320646224973112
                                       :Z 1622510019896744778775901696661325927776133067781647804182209393706560366675)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 236165617901320684274729817951346250289453541280388570237453804251990776400
                                       :Y 1786642707617969793736665338764323085470364143969445998303680947755244660554
                                       :Z 919418434916417000568451540302629298603873586701138165466303022485063416734)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 495259672838366683903565853883896890810323350511963362277424937434159349005
                                       :Y 766134646957426698444758215210142857976257730635268909544930879077396182451
                                       :Z 749813076814690438138393126693677663824871000775197685690914303268511952691)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 3601088859156355271499293323148653454291401923148759235943314407462894969998
                                       :Y 487807287103952846928342168089788793799285143789976454861490723527546521929
                                       :Z 280361092090127254710892865449690467065621126671419294055166486922503595674)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 756342865091598499137322108274799794040836671277539380689879748977081536042
                                       :Y 2626869923768680563022745526820842931875965395105854804406491172483939927702
                                       :Z 135423082286198806269289816051932402852047746399335136408966212318036764787)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 3335486520886998619868968078968217049101084578034831706216335377068697377587
                                       :Y 1741692348535551572682544358224179380849757396403127500981373184704323136911
                                       :Z 3317950146696452259349141616831253320614441191712781600240684748365205102925)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 268731847430127055594263203110926457770859000235958440256095653231952341915
                                       :Y 2650455276615509886220659276596334964368648231879347432542816085252948482830
                                       :Z 360720571267167043234962171086817430947996304219907117624313116702488022813)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 718550833922776767640491805343717432454740134769380766816877080482399645559
                                       :Y 1028907683321240853236059713549192284118878900971018572929056468885301314801
                                       :Z 168273373544798559726474662027571132606838089606221693902400246304675330329)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 3461436951417836199619896065069134777992832308953786049720773415129447624719
                                       :Y 2930557405698950982713754805012958840430707975005375531516573781635264079241
                                       :Z 3537145423025996052911815142598831416173242010158680942241518201795273244994)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 723173841040797880603989305261957302380305140842881673903811342565642965207
                                       :Y 378851855280524692634332782207716485703218551537549034553745249082512048499
                                       :Z 1562708145472518676093499479931181084286844776135831932648680821350322868986)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 1512853473846319820664723403686675316123991760354689724191574344331111231340
                                       :Y 2797117975688524654998948279001551601855436389026837070260309495000213599168
                                       :Z 1485143846748232653697805881904049783927505492641296837159608565201700367078)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 412451459157641418453248126717761590038708736018874850976723984031553548060
                                       :Y 137820131782364485651129481789145217375949372216741773368166652564313351404
                                       :Z 1129896034378539163447720088634049670571898328889737734307414654543028681330)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 148129354299911928139736925742041163846114819441674711387209932090521975401
                                       :Y 3394966903708528026720770759620762953115788536174339462611235318659370907110
                                       :Z 966173748957660962327579131361078257873933040848910879000142235446496729765)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 189622748838203892277909479899292789723668829991778524540698977653604561764
                                       :Y 1982977080331432049033882101374945084642943259098394878520146945940354038060
                                       :Z 1114963859448190981576703225171969555924688442409451177065959064715147143590)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 370851402672690071607153271393777377976432247688084348352235153326667188730
                                       :Y 3477473763049933176658428104143242828125046102665493780150084291202025826741
                                       :Z 2371281539240147608139619714157830379786967726776616249477777867542247566303)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 3553142463706224022274941858852010582655332469958830196503709654435891114635
                                       :Y 2352798428866612537233371799241912062937671024202559404519988947403407391663
                                       :Z 812822785619304765806593507097550825982404680583640380113302197133583731821)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 1338993444999551226216694330943154670928036487964258099565656882026799889259
                                       :Y 2846912150532226713279274693837415907120088730511705564359976819093163949394
                                       :Z 433492006315346640920550741705813438564301534718429056510847092810248116633)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 2206188053892782476809860885004693736031854830929508123261949332405103970182
                                       :Y 3306464061841937418848317401324758386870836318728001435617967019144322877655
                                       :Z 324579634787674625855952948052995926892392035840499936925767872198078407853)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 2451802676326160707105378274807668697018210772941982348688360112209381584511
                                       :Y 2397488946787622621426117985971964072408105860439496224173799720997184414291
                                       :Z 1101245890556943888001353284986132373227806104498259925824548344570571776073)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 3611076558292075260292082554917915467675659784218046689601013311947030212106
                                       :Y 684097241056115697559295287821469559322183760945163414925781511024904826881
                                       :Z 1240948040396748131368952941408873784551611280785297264955721815508799232874)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 760898546125534312120045733652697636644131917809307934939232502790045959931
                                       :Y 1103639609572929422232158615274512151163601350754291372428843721210833632203
                                       :Z 2797350003039950258288412732929687181822454218439397850524551203832231600656)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 1752996336252136302331185276418964323347446141048143257887261460342174600732
                                       :Y 193571430181263533303054297108976038780998672809252689051509288812881173234
                                       :Z 2219562314355718934911656170082487282832838389894211016632085658105178890136)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 582932978593794406934571434082261965694695770448009928360316029715465119403
                                       :Y 630178025988038288798160552660370933278251443888241108248207575363174836678
                                       :Z 3267058103293923370671860449746595917848618888066004347329816543738669027462)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 1504167831844341857512670053389472585960847161000027061305834641532588467826
                                       :Y 2489861905681083901496179675401011785747551776639731463560729538155948810928
                                       :Z 611304200681234753379553113424034733130124891166533668801600432522866492925)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 2359155840780153983141764052925589465355715339341197894656496880972295531411
                                       :Y 118061270542195761983586261201995689058405367842826697423511821204289998708
                                       :Z 2615816052246336948565701645258627669196818116222424094691514433301137235932)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 2611312677706347606365668562626404551634582815419968443397821614928348859037
                                       :Y 497815650775172146367720840267519474938787051229791363193102753615933729765
                                       :Z 1460739994418244391823610979778716904731818074561208449940059581954248649886)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 1937846256849310604683929004428435785398413896214280029543418678173064725977
                                       :Y 3540660313109827468123887455595481210945702421137787392506031988753851245196
                                       :Z 3526990184193929313004745501170940514551642187349814980749402943215726094935)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 835206001769946019623759678891713581230704259816476382275652781944300464518
                                       :Y 646450644218907841377760062236906439844462909536845561059096821460717243779
                                       :Z 959420725134865083926546766924695954761344336459243887611368242300729057913)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 37182451806605022550466523643010078649690549849541924611801986728462659963
                                       :Y 1318445893023344215185799023224728702519039455576643758394057560401193619420
                                       :Z 1376699086371388068934143988726335690067955755287195348823898619117389609997)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 583955735632971790094229413481981988308534771029831223801975548016811092955
                                       :Y 1972187998856047670698419953682498687343806514418089912237137917260909929402
                                       :Z 3479741144562029728301901987960471202104603500846513231358372395202921804406)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 2289771236205194853015293707085889016552620695139515403243082926072622627874
                                       :Y 1635297606182167954829632812170776070297344142757221206888015969355032419802
                                       :Z 709966792730727036255761587296444971201374398828115293043464786815991981307)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 1471432394964981496735079737520611953082738895256702127392021346657863004950
                                       :Y 2973576469619245051872554856639397601006689299000391007771897321701709618989
                                       :Z 1325513656144585656221415812121652994135660175010690169556413624033131156678)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 1535234194924739784581315968566426846532987786808484296161857510487993871450
                                       :Y 2551583810112098396792439399776998292406895146210135477516521016604483337574
                                       :Z 427784258037530883126350213127025276462050379639314237904340288686260887691)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 3234093322234086176438222198120939150074298585338178830812410342997979709073
                                       :Y 961810281305168112642496550706799896251127419866907096719245176188032665347
                                       :Z 3493823068232275736443418839906561966478544744623280562013866107936008329362)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 2264017088780080146751953570838060341373023828614623486635566634644438198972
                                       :Y 1592178764991755452100938615476778724774514900669775704147541319095264532176
                                       :Z 3213949136372500056083789819202756446767658638238611299786357856218975900560)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 3132609048881651079865907458408606050785443697930621833717838368939560338774
                                       :Y 3260330525690722438748378721772171351012755419043711663141352509597485634491
                                       :Z 3245032509566195403986727145133905022935313128737052007684779265175307310531)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 3244949676178962450470248713246811740438730164813832167564707987913646282571
                                       :Y 840227432860192191168190085147235826480071942258680061156456893606607576302
                                       :Z 843233913025924557673325827492024452926687030203791206437063715399448960548)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 1615430648533123935122232666022114016503181101428075232718223646295343282411
                                       :Y 1190977445947312213209953389866537628197087829528982947553820084982384690264
                                       :Z 2901202377821770381275874792288304950739935469683581649125447103447634820971)
             #S(EDWARDS-ECC:ED-PROJ-PT :X 3007165298383410714493224421906766829686355896006871765399522653831739151372
                                       :Y 2015118916051830920079405992651479457049596749863205253790782752588412102554
                                       :Z 1024064227705136932457863750277369246381760536012343227716753644102636712231))
   
   :hs       #(#S(EDWARDS-ECC:ED-PROJ-PT :X 2870748208298105541588184522476726935041918102140970188028207136137858699172
                                         :Y 330794762721705498316996292168451341794555186158033732577747191790963995014
                                         :Z 1713994588012729129902932577294704348473595092014379362448492308412212033171)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 2661920752631100926031324210975062963486218408621841171371489478843562410876
                                         :Y 984075967782828302349789431671792841953529590333818938426026661269610992206
                                         :Z 114832866095621439657032670943628729180097492607713067864287475263460247764)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 1791597887350719516892128862351181963724644388106532260038979863907334658063
                                         :Y 53231090018850096786066258641500410276410329131927167686467603302043127226
                                         :Z 1985290535272411862638677218616182878707740443066134520628846063486957812746)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 259064500324454116286781476291237105966500568084927260960412429540785637747
                                         :Y 3066679452443569874995015951363411635861739604485354890889037313815905553388
                                         :Z 1139454325736806799060868602413651504229338315224396799243530772593105572190)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 1273145042575107731072189054825214523478336951241672600065058931601925470990
                                         :Y 3549707019470038621530986144909049858675233850115359942717076994976405729610
                                         :Z 2899030797082387479923021995784769436703945224940020524975031910762794157572)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 3150533120036542015720183534218002736862122599064292129832717230364479629476
                                         :Y 1229279259740621174039258706352254934904098646584957217712589222264740691586
                                         :Z 2620849208017308795881994743737865832535927701040236487615256164569937320607)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 3382431051388662526112280920498722592346761098082219997293467879629145100189
                                         :Y 1736858753426035979949992004633821609662293483732576008202147218712840285014
                                         :Z 399672922521211284941477014834178225625609866060467210930521876668426550175)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 534506733715207056268087495188588412857974003645735359412650950767238019494
                                         :Y 1138415801938839679750429688318798410655062350351060185206796586783316395744
                                         :Z 3389637831704576556830267281215954888227120106467720815058390203323146231340)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 483318301514904192032114804935839689800355718032303753563348501674836382658
                                         :Y 582568977708449731711800823135236031002861012064927202259684883259978733198
                                         :Z 2661117132826978286029178943450449589691101500879583737355822512542813260770)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 1819483967923048436472856921802237609662119369484567832988927619816495119766
                                         :Y 362851334078474482534181241915314950539846526340141668889277288535871479523
                                         :Z 3291351181634004947079112810824501378156554710203158892339810782748167143487)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 3053680093745382788204055879082011363833942732577912992909698741329523074465
                                         :Y 2580121589457018916289051479868615728019311067339711194781699072491567624842
                                         :Z 3100782148218652608162427194419708696570826571209157664583827999481873585429)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 612724351184766104231387897685012987018681057563076583612631926425610534118
                                         :Y 2222539990040945221965911638208240091156436946568231229383194098710335968845
                                         :Z 1235983525261198189779797715334880150343541681348675831610193318167904368449)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 1845258098446285963279185549311298133572137354836865081669155675257536604280
                                         :Y 3369081201865022215056873974666196238355269037957642232720388762947860228379
                                         :Z 1993027075945313846981277041261960057309596266167671875024001418659740560993)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 2949636166636750950360870212616426584876422215715583466254967794406457152580
                                         :Y 2762639937421471164262643309022822708423241014643334088209239573795769779641
                                         :Z 137387842854371242232449143295976722538506356345502887804570849883290178989)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 337192632021427872348410119027895019090393843775715298524639956481599057008
                                         :Y 3536260717663846041426015505954012325350012277487373566941842389376455507829
                                         :Z 1269805078290781210862517739601045269937678257505897330974422927728287670207)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 1108839081113814704041101711246068185771196530850917328012790855127801929568
                                         :Y 799703014058474056263415686936406153885783946246288640521235262716290757737
                                         :Z 2944717955051446836220357665472315685629528808650509763276167199745408680458)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 2414360875639140743787079563693263949993180439691923233064346150901642149268
                                         :Y 1485452108067046737586950037172227546243193090341033401931601071768219439249
                                         :Z 2758916395894285783836029248121014207108023833726739641898008536001037651705)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 373059720019230232475764670774945956763515353733535088192740633982754530089
                                         :Y 1958078461100467318342403826313654125765012675751263573721734159725048762472
                                         :Z 2453434828710287517772368325763600773502751859783483506194481005612350606031)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 3350053701990137130773086417680609938786815942300088012968110202581418089615
                                         :Y 1603290794503984850527244799718341736895057099290275941164372378959045914642
                                         :Z 673312234961654586510642687044460609635034442542276839687710315703430848905)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 2589549281542215314978954854369662198531993727928182871820102526008032759195
                                         :Y 3292372644171514779457874758979211208315238151439190621932107579740471301794
                                         :Z 148017941609850655633567075435293388442092022775897252380551204713980840157)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 158733431948967454395909628521398838325141738014162089857572048294486308164
                                         :Y 1025622956769539825739821059712033387991867258655317581264532766265657497321
                                         :Z 1347538307627100259920589262180177575428262797150349103849065379933846778657)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 1459554929399477832053625073266632233077952119223011033376523095198749473237
                                         :Y 3454813689529191096482842137091928729736827051417218778115537421855947534709
                                         :Z 3467475582961405823294499451405417571830503133975944794862014157623057596152)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 789855430473731182066085555771976684088201365266068266715136016125289251573
                                         :Y 817934141878392396174489124162854142356454410857108012605833580580082707316
                                         :Z 1774221534734563907428604174094449002482169463889198050874757141769433919011)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 3021107684391135113173777505555104453140564095799214246907822377102441366372
                                         :Y 2011790473450655009349573751104762035618939142087388928158643148796660698200
                                         :Z 3556387669109472984554789135829284603671911270248084187888030924797737337569)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 2104222201776594319417741184527563125838193741898920178397361423858716446047
                                         :Y 907020595353820561891027635095915100758020669728608869956775827432365538005
                                         :Z 1472587226485181841009737142985023999721854379915318810740372650237476042143)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 1682439418241680527197534926285621737992757837497844819153637137218737893413
                                         :Y 1668671941146231802851303531365386024598851487535727857951363304450072842623
                                         :Z 1942511250015891975602832796271094435671070233045897644123245158317936326254)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 864918402964441715814344403631612518602162207354847349305990961258904203968
                                         :Y 567306122886928740875350970770993365128248212675753188046405611174251957852
                                         :Z 1599404363511488116083139989192395918026089210041899573370532215952962077612)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 557611670089354896090861065488746553676231550958665051714457209182018485606
                                         :Y 3558037910750532507414756614647704760996471528695957843407498637219792184997
                                         :Z 543166637423760726920089785966996238205131776731768486125154863148927179130)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 810445465274825156127714307784005650752817296053505177031369401549787025067
                                         :Y 2179532712334151622452777103926404142280499548064225511681512491584705924487
                                         :Z 1079760636259803767854056148658049498962399985785496326376583707333940881854)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 210755044738935628545840993060872840061252128364438140921537138725589564670
                                         :Y 2849413345742490049167382402186966212189389483269052729654478863007247972928
                                         :Z 562504706095919068963517740173275759762500875796711738266322995106580270590)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 2020402629064758087978637937347189884657690385132174310344731272237164755312
                                         :Y 1549758593335942186212459256126003873048729458909205121735434255446243051115
                                         :Z 1865405271617613149243403287355647908828791079541779862379805035423313519691)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 369957869078963989580484961548830891192200624242059223970357193247504602018
                                         :Y 3318369063813410597590561646071921714265267649947690046763557432989309007380
                                         :Z 1010360589601949103152169062138913919405503375668388394043422539890398339021)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 1380426654032906532836319718583176084671801071372209053594846494721250494647
                                         :Y 2152292130062233619761294165266831852535185982607064666722423356919902025580
                                         :Z 2864627707749124091931549485819737634569627751307653775906765516388812999421)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 1460644098912333626186568193340379005236754690270573935533536012316779761132
                                         :Y 1032813729610595142635039333204189555287117834990814179529764355913644344696
                                         :Z 1897035063508803921964072393576476290683608001130148372006170873820311107618)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 2584772045348739919049833457449616920908198684594894818810061487672491369672
                                         :Y 892676496742837536289170888478129428124260169849441678028193270892477458280
                                         :Z 2599214817557814757659192860483126307456774732824137011964521150760876305280)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 1058425052878727266014836896599958611745907075801785912814637765050462592882
                                         :Y 2753025509462697204010369139591165420447779953476493822973859655646555317022
                                         :Z 785990723668928259764001550538713716945481411635599783642079506662681466124)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 1248700346990578968807677148613416861831243868202117406071829832474669444537
                                         :Y 1740930390780032942910623174396898751811193316785938939768966657524347104080
                                         :Z 2172332617423275326014709234316084382406827713734263825536919989020353894852)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 1200937040591617393042241741479621159182578730420644824716393648183721410184
                                         :Y 2165728248866321648416768946169200120132907811706859579828287516607265421875
                                         :Z 149358630126983681202950528795313874430761652832860749089838583184550961709)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 543580154847967612056033364140053987334692403333452516297172753141879479321
                                         :Y 245720017349172585354059244943697334787098705038777235375464311899183639344
                                         :Z 2957621751457771663189196098094635114690090805885654792793408793547428010617)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 1706988940983944938723358613981182847594412680487154458606534379256259885855
                                         :Y 2123347967884733491757373428086628255257838975119311037014802464196064721156
                                         :Z 1658349343816312755738886885721048773280121798641005132025571586780344177790)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 1709435474343082152811660425469138586475899204601794125718247440292813379472
                                         :Y 256548400369807777163249242198183015369962920669277357271562668773309022101
                                         :Z 2735723473410173568871281472865246841891796921434070783619908274747649511435)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 1240689315808843406714838720558209733760646512702732472123184925280215861359
                                         :Y 177202678653358837910837560800253865128706629988575044102810522599617651602
                                         :Z 678311910323923746881952811986427864118882457019754927046933723858124074513)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 677531277231461221331044163559690005719031590163007290679663286734190946796
                                         :Y 2793638842963315212988131696896435455095832255142560913265358319473569682341
                                         :Z 1659867055574695507098430845510225182761829910988261625286650076628390689163)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 319766187838488027737772922147764455751465059781160973248466535083462648284
                                         :Y 126732377691849632227557951763386016139454963213656582474926271515444520085
                                         :Z 1693152360993468288982375780720706331573536591147086758746727010638028801418)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 2822634395313869431978838953711731067179359390139069034345317433564826844312
                                         :Y 2176876141755848248134284569509891600411784876065734894584790819380501983489
                                         :Z 479341585479093272978617395140810521330599001716720588972755267158340515673)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 2547046662848916979664789654543040104878074532655754146655629166493062003230
                                         :Y 1599266909669890966229447916273558373067965843521558833221900814088030487019
                                         :Z 1014235657277292208593687691653355561008943403416827325583618755229990154963)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 1206133161605951704448585140460661759828639051558124569134334182694209461467
                                         :Y 783815171245650639366074346012424429130326543930520252481974229794286993487
                                         :Z 2074116123494261875538670354658686802056220617313685742952476080635080683914)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 462622567391113062923084056813942904899630368444178786111673858522162583258
                                         :Y 2052477010920229901307911653708493866348700917978943555061279829254277832476
                                         :Z 287638105940308666050198809918626621276130569832176619556080904552940360579)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 2222766483361111991043363597524769466957260690798475017962188979907754473048
                                         :Y 1632859845650281814888185755523570160230182693449997906579795801879986772613
                                         :Z 2352878749345524485269677376288584871244472045057576870216046785284086506005)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 2462689647220346921193346778237642498502619033182117488944789232308349142582
                                         :Y 3236164479021061187662402435120864973613625125530983241534577690992950879148
                                         :Z 3068509418233604305708462955061882322796504140886937607888979135700046074250)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 1750757426724096378247472586465769014450590308187728523563934632691130443161
                                         :Y 58505865756556474033901495664741596023418312478602395129215024942900637160
                                         :Z 282181614277108659012949588035739963772289090524513886633086779597977532512)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 680243270450105838249261446210750370957490322417904566322528875575227639522
                                         :Y 938067262925313182201617479863374470831758245581775535564066680422212478298
                                         :Z 2151123097088602187852803749051642953511177921664732312942671243808577003995)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 3263339885856546096041918982481897059050079332165679708151325459153677486173
                                         :Y 277002690802647033193853963652741390334815893232638622144592367389017150377
                                         :Z 119989862267446557624167409717774469031439987197759030914868542468543369149)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 2668146776654983786186169656009403695020865924779540900449971077824309409007
                                         :Y 1723388658615076786930351051211528969983509890618943956642347448903720718351
                                         :Z 1960244607192809258070060149653757598637158368404992878955667197652162613214)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 3148814576415750836993033636389128869127377492087664039190014770895762831658
                                         :Y 1961155100079943224651906823566616274527554793188399036383871488016403348679
                                         :Z 712052632014134210378619493220294523691029042008810564274992565220360896188)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 3383643061061703927049387169849983920559712261487409659552782236638727368004
                                         :Y 1025091566938109217802057063447237564978177588988838260611831410160089463885
                                         :Z 1049244004572827412225396123685894338954271730748722743560304327702388156843)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 2338113933365937878920725106121967755221129661259460902389242629506668455370
                                         :Y 1307478696293832553980299565451010901655811468741803024263510975914548034525
                                         :Z 3566890287606739312122446123296594937010399150977852666401366774136820556004)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 1067816617225780120280239363263564937347998458840243351568971019505533919869
                                         :Y 1438604356822287701261166114511013880446873831280174945235143133612162852944
                                         :Z 875964604763384052701265380715171350771544261440437960945865774114958996178)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 3022636033442677731989899401165979635948085399470635976814598354933575099385
                                         :Y 2000542661011481438240420286914373771615833759073082443875484150955263695658
                                         :Z 2987784239284447799575654443259533012882026522761204642455148917846477999736)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 1694515893167177035188628247480910876574979207771239962293306968912054122480
                                         :Y 717468552991857549580226980825924252691459194674998386920102476037752754844
                                         :Z 397240463668336297619500059098455922261418782866062584805994428828565571774)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 3282207691847096455754208590755356367375253503265959052677886556344240732261
                                         :Y 909164074596259610280767159873933975193638805136840430418653134970275794534
                                         :Z 1723617471223771205267191122980701302736748459699429943294736032348201172668)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 88761939232388340233298796300823088554739232593690674112768424353538584758
                                         :Y 1382285293741997220792269693725553229309603185345049116499526814493285521729
                                         :Z 904372473231135346026118411507965145728851078503710268143816926667816600516)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 3130147227149894997759016329371357396692052529279009327371310541238420616890
                                         :Y 169671040106183746179729316437070611317437611156272567763274164730944844046
                                         :Z 356145543460540161791453422881569148074403326439229144753313678672454744675)
               #S(EDWARDS-ECC:ED-PROJ-PT :X 88278771123461676104811025892197621226839071315977385288380729919294247421
                                         :Y 1600946869314465967577632898966625087177981303126684311353927291855754656389
                                         :Z 2858111973215201843626968754024276010390115961935538659052234512793812556764))
   ))

(defvar *gs*        nil)
(defvar *hs*        nil)
(defvar *hpt*       nil)

(defun init-basis (&key (nbits *max-bit-length*)
                        (curve (ed-curve-name *edcurve*)))
  (cond (*bp-basis*
         (cond ((eql curve *curve*)
                (cond ((= nbits *nbits*)
                       *bp-basis*)
                      ((< nbits *nbits*)
                       (make-bp-basis
                        :curve  curve
                        :nbits  nbits
                        :hpt    *bhpt*
                        :gs     *bgs*
                        :hs     *bhs*))
                      (t
                       (make-bp-basis
                        :curve  curve
                        :nbits  nbits
                        :hpt    *bhpt*
                        :gs     (concatenate 'vector 
                                             (basis-pts (- nbits *nbits*))
                                             *bgs*)
                        :hs     (concatenate 'vector
                                             (basis-pts (- nbits *nbits*))
                                             *bhs*)))
                      ))
               (t
                (make-bp-basis
                 :curve  curve
                 :nbits  nbits
                 :hpt    (ed-mul (ed-random-generator) 1)
                 :gs     (basis-pts nbits)
                 :hs     (basis-pts nbits)))
               ))

        (t
         (setf *bp-basis*
               (make-bp-basis
                :curve  curve
                :nbits  nbits
                :hpt    (ed-mul (ed-random-generator) 1) ;; make into ed-proj-pt
                :gs     (basis-pts nbits)
                :hs     (basis-pts nbits))
               ))
        ))

(defun make-range-proofs (nbits &rest vals)
  (let ((*bp-basis*  (init-basis :nbits nbits)))
    (with-ed-curve *curve*
      (with-mod *ed-r*
        (let* ((*hpt*  *bhpt*)
               (*gs*   *bgs*)
               (*hs*   *bhs*)
               (prover (make-range-prover :nbits nbits)))
          (make-range-proof-block
           :basis  *bp-basis*
           :proofs (mapcar prover vals))
          )))))

(defmethod validate-range-proofs ((proof-block range-proof-block))
  (let ((*bp-basis*  (range-proof-block-basis proof-block)))
    (with-ed-curve *curve*
      (with-mod *ed-r*
        (let* ((*hpt*  *bhpt*)
               (*gs*   *bgs*)
               (*hs*   *bhs*))
          (every 'validate-range-proof (range-proof-block-proofs proof-block))
          )))))

;; ------------------------------
;; Construct a range-prover for use on multiple values

(defun make-range-prover (&key (nbits *max-bit-length*))
  #-ccl
  (check-type nbits (fixnum 1))
  #+ccl
  (check-type nbits fixnum)
  
  ;; let's compute the basis vectors just once, and share them
  (let* ((hpt  *hpt*)
         (hs   *hs*)
         (gs   *gs*))

    (labels
        ;; ---------------------------------------------
        ((make-range-proof (v)
           (check-type v (integer 0))
           (assert (< v (ash 1 nbits)))
           (let* ((gamma      (rand-val))
                  (vcmt       (simple-commit hpt gamma v))
                  (vcmt-cmpr  (ed-compress-pt vcmt))
                  
                  (a_l        (bits-vector v nbits))
                  (a_r        (vec-decr a_l 1))
                  (alpha      (rand-val))
                  (acmt       (vec-commit hpt alpha hs a_r gs a_l))
                  (acmt-cmpr  (ed-compress-pt acmt))
                  
                  (s_l        (random-vec nbits))
                  (s_r        (random-vec nbits))
                  (rho        (rand-val))
                  (scmt       (vec-commit hpt rho hs s_r gs s_l))
                  (scmt-cmpr  (ed-compress-pt scmt))
                  
                  ;; publish Acmt, Scmt
                  
                  (y          (int (hash/256 vcmt-cmpr acmt-cmpr scmt-cmpr)))
                  (z          (int (hash/256 y)))
                  
                  (poly_l0    (vec-decr a_l z))
                  (poly_l1    s_l)
                  (poly_l     (vector poly_l0 poly_l1))
                  
                  (yvec       (pow-vec y nbits))
                  (zsq        (m* z z))
                  (poly_r0    (vec-add
                               (vec-hadamard-prod yvec
                                                  (vec-incr a_r z))
                               (vec-scale (twos-vec nbits) zsq)))
                  (poly_r1    (vec-hadamard-prod yvec s_r))
                  (poly_r     (vector poly_r0 poly_r1))              
                  
                  (poly_t     (poly-dot-prod poly_l poly_r))
                  (t1         (aref poly_t 1))
                  (t2         (aref poly_t 2))
                  
                  (tau1       (rand-val))
                  (tau2       (rand-val))
                  
                  (t1cmt      (simple-commit hpt tau1 t1))
                  (t1cmt-cmpr (ed-compress-pt t1cmt))
                  (t2cmt      (simple-commit hpt tau2 t2))
                  (t2cmt-cmpr (ed-compress-pt t2cmt))
                  
                  ;; publish T1cmt, T2cmt
                  
                  (x          (int (hash/256 t1cmt-cmpr t2cmt-cmpr)))
                  (lvec       (vec-add poly_l0 (vec-scale poly_l1 x)))
                  (rvec       (vec-add poly_r0 (vec-scale poly_r1 x)))
                  (t_hat      (vec-dot-prod lvec rvec))
                  (tau_x      (vec-dot-prod (pow-vec x 3)
                                            (vector (m* gamma zsq) tau1 tau2)))
                  (mu         (m+ alpha
                                  (m* rho x)))
                  
                  ;; publish tau_x, mu, t_hat, lvec, rvec
                  )
             (%make-range-proof
              ;; commitments
              :vcmt  vcmt-cmpr
              :acmt  acmt-cmpr
              :scmt  scmt-cmpr
              :t1cmt t1cmt-cmpr
              :t2cmt t2cmt-cmpr
              ;; parameters
              :tau_x tau_x
              :mu    mu
              :t_hat t_hat
              :dot-proof (make-lr-dot-prod-proof y mu t_hat lvec rvec)
              ;; challenge values x, y, z
              :x     x
              :y     y
              :z     z))
           ))
      
      ;; ---------------------------------------------------
      #'make-range-proof)))

;; ---------------------------------------------------------------------
;; Range proof validation

(defun validate-range-proof (proof)
  (let* ((nbits     *nbits*)
         (y         (range-proof-y proof))
         (yvec      (pow-vec y nbits))
         (z         (range-proof-z proof))
         (zsq       (m* z z))
         (x         (range-proof-x proof))
         (xsq       (m* x x))
         (delta     (m- (m* (m- z zsq)
                            (reduce 'm+ yvec))
                        (m* (1- (ash 1 nbits))
                            (m* z zsq))))
         (chck-v-l  (simple-commit *hpt* (range-proof-tau_x proof)
                                   (range-proof-t_hat proof)))
         (vcmt      (ed-decompress-pt (range-proof-vcmt proof)))
         (t1cmt     (ed-decompress-pt (range-proof-t1cmt proof)))
         (t2cmt     (ed-decompress-pt (range-proof-t2cmt proof)))
         (chck-v-r  (ed-add (ed-mul vcmt zsq)
                            (ed-add (ed-nth-pt delta)
                                    (ed-add (ed-mul t1cmt x)
                                            (ed-mul t2cmt xsq))
                                    ))))
    (when (ed-pt= chck-v-l chck-v-r)
      (let* ((*hs*      (map 'vector 'ed-mul
                             *hs*
                               (pow-vec (m/ y) nbits)))
             (hpows     (vec-add (vec-scale yvec z)
                                 (vec-scale (twos-vec nbits) zsq)))
             (gpows     (vec-scale (ones-vec nbits) (m- z)))
             (acmt      (ed-decompress-pt (range-proof-acmt proof)))
             (scmt      (ed-decompress-pt (range-proof-scmt proof)))
             (chk-p-l   (ed-add acmt
                                (vec-commit scmt x
                                            *hs* hpows
                                            *gs* gpows)))
             (dot-proof (range-proof-dot-proof proof))
             (p         (ed-decompress-pt (dot-prod-proof-pcmt dot-proof))))
        
        (when (ed-pt= chk-p-l p)
          (fast-validate-dot-prod-proof dot-proof))
        ))))

;; -----------------------------------------------------------

(defun make-lr-dot-prod-proof (y mu t_hat lvec rvec)
  ;; set up conditions for range proofs to provide Bulletproofs on
  ;; vector dot products
  (let* ((nbits (length lvec))
         (*hs*  (map 'vector 'ed-mul
                     *hs*
                     (pow-vec (m/ y) nbits)))
         (u     (ed-mul *hpt* (m/ mu t_hat)))
         (p     (vec-commit *hpt* mu
                            *hs*  rvec
                            *gs*  lvec)))
    
    (make-dot-prod-proof u p lvec rvec)))


(defun make-dot-prod-proof (u pcmt a b)
  ;; for input vectors a, b, commitment p, aux arg u
  ;; global basis vectors g, h, order n = length g
  ;; n should be pow2
  ;;
  ;; construct proof that c = <a b> and P = g^a h^b u^c
  ;;
  (um:nlet-tail iter ((n  (length a))
                      (g  *gs*)
                      (h  *hs*)
                      (p  pcmt)
                      (a  a)
                      (b  b)
                      (accum nil))
    (if (eql 1 n)
        (%make-dot-prod-proof ;; validate as P = g^a h^b u^(a*b)
                              :u    (ed-compress-pt u)
                              :pcmt (ed-compress-pt pcmt)
                              :a    (aref a 0)
                              :b    (aref b 0)
                              :xlrs (nreverse accum))
      ;; else
      (let* ((n/2  (ash n -1))
             (gl   (subseq g 0 n/2))
             (gr   (subseq g n/2))
             (hl   (subseq h 0 n/2))
             (hr   (subseq h n/2))
             (al   (subseq a 0 n/2))
             (ar   (subseq a n/2))
             (bl   (subseq b 0 n/2))
             (br   (subseq b n/2))
             (cl   (vec-dot-prod al br))
             (cr   (vec-dot-prod ar bl))
             (l    (vec-commit u cl
                               hl br
                               gr al))
             (r    (vec-commit u cr
                               hr bl
                               gl ar))
             ;; publish L,R
             (lcmpr (ed-compress-pt l))
             (rcmpr (ed-compress-pt r))
             (x     (int (hash/256 lcmpr rcmpr))) ;; challenge x
             
             (invx  (m/ x))
             (gp    (map 'vector
                         (lambda (ptl ptr)
                           (ed-add
                            (ed-mul ptl invx)
                            (ed-mul ptr x)))
                         gl gr))
             (hp    (map 'vector
                         (lambda (ptl ptr)
                           (ed-add
                            (ed-mul ptl x)
                            (ed-mul ptr invx)))
                         hl hr))
             
             (xsq    (m* x x))
             (xsqinv (m/ xsq))
             (pp     (ed-add
                      (ed-mul l xsq)
                      (ed-add p
                              (ed-mul r xsqinv))))
             
             (ap     (vec-add
                      (vec-scale al x)
                      (vec-scale ar invx)))
             (bp     (vec-add
                      (vec-scale bl invx)
                      (vec-scale br x))))
        
        (iter n/2 gp hp pp ap bp
              (cons (list x lcmpr rcmpr) accum)))
      )))

;; -------------------------------------------------------
#|
  ;; not needed with fast validation running properly...
(defun validate-dot-prod-proof (proof)
  (let* ((u         (ed-decompress-pt (dot-prod-proof-u proof)))
         (p         (ed-decompress-pt (dot-prod-proof-pcmt proof)))
         (a         (dot-prod-proof-a proof))
         (b         (dot-prod-proof-b proof))
         (xlrs      (dot-prod-proof-xlrs proof)))
    (um:nlet-tail iter ((gs   *gs*)
                        (hs   *hs*)
                        (p    p)
                        (xlrs xlrs))
      (if (endp xlrs)
          (ed-pt= p (ed-add
                     (ed-mul (aref gs 0) a)
                     (ed-add
                      (ed-mul (aref hs 0) b)
                      (ed-mul u (m* a b)))))
        ;; else
        (destructuring-bind (x lcmpr rcmpr) (first xlrs)
          (let* ((l    (ed-decompress-pt lcmpr))
                 (r    (ed-decompress-pt rcmpr))
                 (n/2  (ash (length gs) -1))
                 (gl   (subseq gs 0 n/2))
                 (gr   (subseq gs n/2))
                 (hl   (subseq hs 0 n/2))
                 (hr   (subseq hs n/2))
                 (xsq  (m* x x))
                 (pp   (ed-add
                        (ed-mul l xsq)
                        (ed-add
                         p
                         (ed-mul r (m/ xsq)))))
                 
                 (invx  (m/ x))
                 (gp    (map 'vector
                             (lambda (ptl ptr)
                               (ed-add
                                (ed-mul ptl invx)
                                (ed-mul ptr x)))
                             gl gr))
                 (hp    (map 'vector
                             (lambda (ptl ptr)
                               (ed-add
                                (ed-mul ptl x)
                                (ed-mul ptr invx)))
                             hl hr)))
            (iter gp hp pp (cdr xlrs))))
        ))))
|#             
;; --------------------------------------------------------------

(defun compute-svec (xlrs nbits)
  (let ((svec (make-array nbits))
        (xs   (mapcar 'first xlrs)))
    (loop for ix from 0 below nbits
          do
          (setf (aref svec ix)
                (let ((prod 1))
                  (loop for jx from 0
                        for x in xs
                        do
                        (setf prod (m* prod
                                       (if (logbitp jx ix)
                                           x
                                         (m/ x)))))
                  prod)))
    svec))
  
(defun fast-validate-dot-prod-proof (proof)
  (let* ((nbits     *nbits*)
         (u         (ed-decompress-pt (dot-prod-proof-u proof)))
         (p         (ed-decompress-pt (dot-prod-proof-pcmt proof)))
         (a         (dot-prod-proof-a proof))
         (b         (dot-prod-proof-b proof))
         (xlrs      (reverse (dot-prod-proof-xlrs proof)))
         (sv        (compute-svec xlrs nbits))
         (svinv     (map 'vector 'm/ sv))
         (chk_l     (vec-commit u (m* a b)
                                *gs* (vec-scale sv a)
                                *hs* (vec-scale svinv b)))
         (chk_r     (reduce (lambda (ans triple)
                              (destructuring-bind (x lcmpr rcmpr) triple
                                (let ((xsq (m* x x))
                                      (l   (ed-decompress-pt lcmpr))
                                      (r   (ed-decompress-pt rcmpr)))
                                  (ed-add ans
                                          (ed-add
                                           (ed-mul l xsq)
                                           (ed-mul r (m/ xsq))))
                                  )))
                            xlrs
                            :initial-value p)))
    (ed-pt= chk_l chk_r)))

;; ----------------------------------------------------------------------
;; test it out
#|
(defun tst (nbits &rest vals)
  (let* ((proofs (apply 'make-range-proofs nbits vals)))
    (assert (validate-range-proofs proofs))
    proofs))

(defun timing-test (&optional (niter 10))
  (let* ((vals   (loop repeat niter collect (random-between 0 #.(ash 1 64))))
         (proofs (time (apply 'make-range-proofs 64 vals))))
    (assert (time (validate-range-proofs proofs)))
    proofs))
|#

